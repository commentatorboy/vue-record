{"version":3,"sources":["webpack:///./node_modules/recordrtc/RecordRTC.js","webpack:///./node_modules/vue-loader/lib/runtime/component-normalizer.js","webpack:///./node_modules/process/browser.js","webpack:///(webpack)/buildin/global.js"],"names":["RecordRTC","mediaStream","config","RecordRTCConfiguration","type","self","this","initRecorder","initCallback","Recorder","recorder","isChrome","isEdge","isOpera","StereoAudioRecorder","MediaRecorder","prototype","MediaStreamRecorder","WhammyRecorder","GifRecorder","CanvasRecorder","isMediaRecorderCompatible","getVideoTracks","length","getAudioTracks","isTypeSupported","recorderType","Array","MultiStreamRecorder","disableLogs","name","console","log","constructor","mediaRecorder","record","setState","stopRecording","callback","state","resumeRecording","setTimeout","warn","stop","_callback","warningLog","__blob","Object","keys","forEach","key","blob","bytesToSize","size","url","URL","createObjectURL","call","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","Worker","navigator","mozGetUserMedia","reader","FileReader","onload","event","target","result","webWorker","_function","Blob","toString","worker","revokeObjectURL","processInWebWorker","onmessage","data","handleRecordingDuration","counter","recordingDuration","onRecordingStopped","onStateChanged","WARNING","returnObject","startRecording","config2","clearRecordedData","pauseRecording","pause","resume","setRecordingDuration","getBlob","toURL","getInternalRecorder","save","fileName","file","e","fileExtension","split","indexOf","splitted","fileFullName","Math","round","random","msSaveOrOpenBlob","msSaveBlob","hyperlink","document","createElement","href","download","style","body","documentElement","appendChild","click","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","i","push","duration","image","bufferSize","sampleRate","buffer","reset","getState","destroy","Storage","AudioContextConstructor","close","version","prop","audio","video","mimeType","bitsPerSecond","MRecordRTC","addStream","_mediaStream","mediaType","gif","audioRecorder","numberOfAudioChannels","timeSlice","onTimeStamp","newStream","videoTrack","MediaStream","addTrack","videoRecorder","canvas","frameInterval","gifRecorder","frameRate","quality","blobURL","output","callback00","webkitURL","_audioDataURL","_videoDataURL","writeToDisk","args","module","exports","undefined","__WEBPACK_AMD_DEFINE_RESULT__","apply","Fetch","_type","replace","options","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","that","global","userAgent","getUserMedia","error","arguments","captureStream","mozCaptureStream","obj","getContext","play","drawImage","toDataURL","HTMLVideoElement","location","protocol","hash","screen","width","height","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","lastTime","element","currTime","Date","getTime","timeToCall","max","id","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","AudioContext","webkitAudioContext","mozAudioContext","webkitGetUserMedia","opera","isSafari","toLowerCase","isElectron","bytes","parseInt","floor","pow","toPrecision","process","versions","electron","setSrcObject","stream","ignoreCreateObjectURL","src","srcObject","mozSrcObject","alert","webkitMediaStream","getTracks","tracks","track","kind","chrome","InstallTrigger","appVersion","verOffset","ix","nAgt","fullVersion","parseFloat","majorVersion","substring","isNaN","arrayOfBlobs","updateTimeStamp","timestamps","getMimeType","secondObject","clearRecordedDataCB","getArrayOfBlobs","allStates","recorderHints","canRecordMimeType","ignoreMutedMedia","ondataavailable","recordingCallback","getNativeBlob","onstart","onpause","onresume","onstop","onerror","looper","manuallyStopped","timeslice","start","getAllStates","checkForInactiveTracks","active","ended","isMediaStreamActive","jsAudioNode","leftchannel","rightchannel","recording","recordingLength","desiredSampRate","mergeLeftRightBuffers","mergeAudioBuffers","cb","interleaved","leftBuffers","slice","rightBuffers","internalInterleavedLength","interpolateArray","newSampleRate","oldSampleRate","fitCount","newData","springFactor","Number","tmp","before","toFixed","after","ceil","atPoint","linearInterpolate","mergeBuffers","channelBuffer","rLength","Float64Array","offset","lng","set","writeUTFBytes","string","setUint8","charCodeAt","leftChannel","rightChannel","inputIndex","index","interleave","interleavedLength","ArrayBuffer","DataView","setUint32","setUint16","setInt16","noWorker","workerURL","resetVariables","isAudioProcessStarted","isPaused","byteLength","context","audioInput","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","connect","intervalsBasedBuffers","left","right","onaudioprocess","disconnect","onAudioProcessStarted","inputBuffer","getChannelData","chLeft","Float32Array","chRight","destination","htmlElement","html2canvas","isCanvasSupportsStreamCapturing","item","globalCanvas","mediaStreamRecorder","isRecording","_isChrome","webkitRTCPeerConnection","chromeVersion","matchArray","match","HTMLCanvasElement","CanvasRenderingContext2D","useWhammyRecorder","canvasMediaStream","webkitCaptureStream","mdStream","whammy","frames","drawCanvasFrame","getWebPImages","nodeName","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","compile","isPausedRecording","newCanvas","grabMouse","showMousePointer","onrendered","Whammy","Video","drawFrames","paused","isStopDrawing","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","o","context2d","resultFrames","checkUntilNotBlack","endCheckFrame","sampleColor","maxColorDifference","sqrt","pixTolerance","frameTolerance","doNotCheckNext","functionToLoop","loop","f","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","r","g","b","concat","cloneNode","onloadedmetadata","muted","_this","WhammyVideo","whammyInWebWorker","getClusterData","clusterTimecode","clusterCounter","clusterFrames","map","block","flags","keyframe","invisible","lacing","discardable","trackNum","timecode","String","fromCharCode","join","makeSimpleBlock","numToBuffer","num","parts","Uint8Array","reverse","bitsToBuffer","bits","substr","getStrLength","unpadded","webm","info","checkFrames","EBML","frameNumber","clusterDuration","cluster","generateEBML","json","ebml","len","zeroes","sizeToString","padded","riff","VP8","RIFF","WEBP","frameStart","c","parseWebP","parseRIFF","chunks","atob","add","test","init","indexedDB","open","db","dbName","request","onError","onsuccess","setVersion","createObjectStore","putInDB","onupgradeneeded","dataBase","dataStoreName","transaction","getFromStore","portionName","objectStore","get","put","GIFEncoder","script","isHTMLObject","isLoadedMetaData","offsetWidth","offsetHeight","gifEncoder","setRepeat","setDelay","setQuality","onGifRecordingStarted","now","lastAnimationFrame","drawVideoFrame","time","clearedRecordedData","lastFrameTime","onGifPreview","addFrame","bin","autoplay","MultiStreamsMixer","arrayOfMediaStreams","videos","isStopDrawingFrames","useGainNode","drawVideosToCanvas","videosLength","fullcanvas","remaining","x","y","top","onRender","getVideo","volume","resetVideoStreams","streams","startDrawingFrames","appendStreams","audioContext","audioSource","audioDestination","audioSources","releaseStreams","gainNode","source","clearRect","getMixedStream","mixedVideoStream","capturedStream","videoStream","getMixedVideoStream","mixedAudioStream","createGain","gain","value","audioTracksLength","createMediaStreamDestination","getMixedAudioStream","mixer","previewStream","addStreams","RecordRTCPromisesHandler","recordRTC","Promise","resolve","reject","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","default","hook","_compiled","functional","_scopeId","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","__webpack_require__","d","__webpack_exports__","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","Function","eval"],"mappings":"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","file":"vendors~main.53c81e00.js","sourcesContent":["'use strict';\r\n\r\n// Last time updated: 2017-12-13 5:07:29 AM UTC\r\n\r\n// ________________\r\n// RecordRTC v5.4.6\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\n// ____________\r\n// RecordRTC.js\r\n\r\n/**\r\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \r\n * @summary Record audio, video or screen inside the browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTC\r\n * @class\r\n * @example\r\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\r\n *     type: 'video', // audio or video or gif or canvas\r\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\r\n * });\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction RecordRTC(mediaStream, config) {\r\n    if (!mediaStream) {\r\n        throw 'First parameter is required.';\r\n    }\r\n\r\n    config = config || {\r\n        type: 'video'\r\n    };\r\n\r\n    config = new RecordRTCConfiguration(mediaStream, config);\r\n\r\n    // a reference to user's recordRTC object\r\n    var self = this;\r\n\r\n    function startRecording(config2) {\r\n        if (!!config2) {\r\n            // allow users to set options using startRecording method\r\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\r\n            config = new RecordRTCConfiguration(mediaStream, config2);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('started recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder.record();\r\n\r\n            setState('recording');\r\n\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n            return self;\r\n        }\r\n\r\n        initRecorder(function() {\r\n            if (self.recordingDuration) {\r\n                handleRecordingDuration();\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    function initRecorder(initCallback) {\r\n        if (initCallback) {\r\n            config.initCallback = function() {\r\n                initCallback();\r\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\r\n            };\r\n        }\r\n\r\n        var Recorder = new GetRecorderType(mediaStream, config);\r\n\r\n        mediaRecorder = new Recorder(mediaStream, config);\r\n        mediaRecorder.record();\r\n\r\n        setState('recording');\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\r\n        }\r\n    }\r\n\r\n    function stopRecording(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'paused') {\r\n            self.resumeRecording();\r\n\r\n            setTimeout(function() {\r\n                stopRecording(callback);\r\n            }, 1);\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording' && !config.disableLogs) {\r\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\r\n        }\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Stopped recording ' + config.type + ' stream.');\r\n        }\r\n\r\n        if (config.type !== 'gif') {\r\n            mediaRecorder.stop(_callback);\r\n        } else {\r\n            mediaRecorder.stop();\r\n            _callback();\r\n        }\r\n\r\n        setState('stopped');\r\n\r\n        function _callback(__blob) {\r\n            if (!mediaRecorder) {\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, '');\r\n                } else {\r\n                    callback('');\r\n                }\r\n                return;\r\n            }\r\n\r\n            Object.keys(mediaRecorder).forEach(function(key) {\r\n                if (typeof mediaRecorder[key] === 'function') {\r\n                    return;\r\n                }\r\n\r\n                self[key] = mediaRecorder[key];\r\n            });\r\n\r\n            var blob = mediaRecorder.blob;\r\n\r\n            if (!blob) {\r\n                if (__blob) {\r\n                    mediaRecorder.blob = blob = __blob;\r\n                } else {\r\n                    throw 'Recording failed.';\r\n                }\r\n            }\r\n\r\n            if (blob && !config.disableLogs) {\r\n                console.log(blob.type, '->', bytesToSize(blob.size));\r\n            }\r\n\r\n            if (callback) {\r\n                var url = URL.createObjectURL(blob);\r\n\r\n                if (typeof callback.call === 'function') {\r\n                    callback.call(self, url);\r\n                } else {\r\n                    callback(url);\r\n                }\r\n            }\r\n\r\n            if (!config.autoWriteToDisk) {\r\n                return;\r\n            }\r\n\r\n            getDataURL(function(dataURL) {\r\n                var parameter = {};\r\n                parameter[config.type + 'Blob'] = dataURL;\r\n                DiskStorage.Store(parameter);\r\n            });\r\n        }\r\n    }\r\n\r\n    function pauseRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'recording') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('paused');\r\n\r\n        mediaRecorder.pause();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Paused recording.');\r\n        }\r\n    }\r\n\r\n    function resumeRecording() {\r\n        if (!mediaRecorder) {\r\n            warningLog();\r\n            return;\r\n        }\r\n\r\n        if (self.state !== 'paused') {\r\n            if (!config.disableLogs) {\r\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\r\n            }\r\n            return;\r\n        }\r\n\r\n        setState('recording');\r\n\r\n        // not all libs have this method yet\r\n        mediaRecorder.resume();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Resumed recording.');\r\n        }\r\n    }\r\n\r\n    function readFile(_blob) {\r\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n    }\r\n\r\n    function getDataURL(callback, _mediaRecorder) {\r\n        if (!callback) {\r\n            throw 'Pass a callback function over getDataURL.';\r\n        }\r\n\r\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\r\n\r\n        if (!blob) {\r\n            if (!config.disableLogs) {\r\n                console.warn('Blob encoder did not finish its job yet.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                getDataURL(callback, _mediaRecorder);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\r\n            var webWorker = processInWebWorker(readFile);\r\n\r\n            webWorker.onmessage = function(event) {\r\n                callback(event.data);\r\n            };\r\n\r\n            webWorker.postMessage(blob);\r\n        } else {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(blob);\r\n            reader.onload = function(event) {\r\n                callback(event.target.result);\r\n            };\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            URL.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    }\r\n\r\n    function handleRecordingDuration(counter) {\r\n        counter = counter || 0;\r\n\r\n        if (self.state === 'paused') {\r\n            setTimeout(function() {\r\n                handleRecordingDuration(counter);\r\n            }, 1000);\r\n            return;\r\n        }\r\n\r\n        if (self.state === 'stopped') {\r\n            return;\r\n        }\r\n\r\n        if (counter >= self.recordingDuration) {\r\n            stopRecording(self.onRecordingStopped);\r\n            return;\r\n        }\r\n\r\n        counter += 1000; // 1-second\r\n\r\n        setTimeout(function() {\r\n            handleRecordingDuration(counter);\r\n        }, 1000);\r\n    }\r\n\r\n    function setState(state) {\r\n        if (!self) {\r\n            return;\r\n        }\r\n\r\n        self.state = state;\r\n\r\n        if (typeof self.onStateChanged.call === 'function') {\r\n            self.onStateChanged.call(self, state);\r\n        } else {\r\n            self.onStateChanged(state);\r\n        }\r\n    }\r\n\r\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\r\n\r\n    function warningLog() {\r\n        if (config.disableLogs === true) {\r\n            return;\r\n        }\r\n\r\n        console.warn(WARNING);\r\n    }\r\n\r\n    var mediaRecorder;\r\n\r\n    var returnObject = {\r\n        /**\r\n         * This method starts the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var recorder = RecordRTC(mediaStream, {\r\n         *     type: 'video'\r\n         * });\r\n         * recorder.startRecording();\r\n         */\r\n        startRecording: startRecording,\r\n\r\n        /**\r\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     // use either \"this\" or \"recorder\" object; both are identical\r\n         *     video.src = this.toURL();\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        stopRecording: stopRecording,\r\n\r\n        /**\r\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Firefox is unable to pause the recording. Fix it.\r\n         * @example\r\n         * recorder.pauseRecording();  // pause the recording\r\n         * recorder.resumeRecording(); // resume again\r\n         */\r\n        pauseRecording: pauseRecording,\r\n\r\n        /**\r\n         * This method resumes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.pauseRecording();  // first of all, pause the recording\r\n         * recorder.resumeRecording(); // now resume it\r\n         */\r\n        resumeRecording: resumeRecording,\r\n\r\n        /**\r\n         * This method initializes the recording.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * recorder.initRecorder();\r\n         */\r\n        initRecorder: initRecorder,\r\n\r\n        /**\r\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var fiveMinutes = 5 * 1000 * 60;\r\n         * recorder.setRecordingDuration(fiveMinutes, function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         * \r\n         * // or otherwise\r\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\r\n         *    var blob = this.getBlob();\r\n         *    video.src = this.toURL();\r\n         * });\r\n         */\r\n        setRecordingDuration: function(recordingDuration, callback) {\r\n            if (typeof recordingDuration === 'undefined') {\r\n                throw 'recordingDuration is required.';\r\n            }\r\n\r\n            if (typeof recordingDuration !== 'number') {\r\n                throw 'recordingDuration must be a number.';\r\n            }\r\n\r\n            self.recordingDuration = recordingDuration;\r\n            self.onRecordingStopped = callback || function() {};\r\n\r\n            return {\r\n                onRecordingStopped: function(callback) {\r\n                    self.onRecordingStopped = callback;\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * This method can be used to clear/reset all the recorded data.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\r\n         * @example\r\n         * recorder.clearRecordedData();\r\n         */\r\n        clearRecordedData: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            mediaRecorder.clearRecordedData();\r\n\r\n            if (!config.disableLogs) {\r\n                console.log('Cleared old recorded data.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.getBlob();\r\n         *\r\n         *     var file = new File([blob], 'filename.webm', {\r\n         *         type: 'video/webm'\r\n         *     });\r\n         *\r\n         *     var formData = new FormData();\r\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\r\n         *     uploadToServer(formData);\r\n         * });\r\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\r\n         */\r\n        getBlob: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return mediaRecorder.blob;\r\n        },\r\n\r\n        /**\r\n         * Get data-URI instead of Blob.\r\n         * @param {function} callback - Callback to get the Data-URI.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     recorder.getDataURL(function(dataURI) {\r\n         *         video.src = dataURI;\r\n         *     });\r\n         * });\r\n         */\r\n        getDataURL: getDataURL,\r\n\r\n        /**\r\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     video.src = this.toURL();\r\n         * });\r\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\r\n         */\r\n        toURL: function() {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            return URL.createObjectURL(mediaRecorder.blob);\r\n        },\r\n\r\n        /**\r\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * var internal = recorder.getInternalRecorder();\r\n         * if(internal instanceof MultiStreamRecorder) {\r\n         *     internal.addStreams([newAudioStream]);\r\n         *     internal.resetVideoStreams([screenStream]);\r\n         * }\r\n         * @returns {Object} Returns internal recording object.\r\n         */\r\n        getInternalRecorder: function() {\r\n            return mediaRecorder;\r\n        },\r\n\r\n        /**\r\n         * Invoke save-as dialog to save the recorded blob into your disk.\r\n         * @param {string} fileName - Set your own file name.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     this.save('file-name');\r\n         *\r\n         *     // or manually:\r\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\r\n         * });\r\n         */\r\n        save: function(fileName) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\r\n        },\r\n\r\n        /**\r\n         * This method gets a blob from indexed-DB storage.\r\n         * @param {function} callback - Callback to get the recorded blob.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.getFromDisk(function(dataURL) {\r\n         *     video.src = dataURL;\r\n         * });\r\n         */\r\n        getFromDisk: function(callback) {\r\n            if (!mediaRecorder) {\r\n                warningLog();\r\n                return;\r\n            }\r\n\r\n            RecordRTC.getFromDisk(config.type, callback);\r\n        },\r\n\r\n        /**\r\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\r\n         * @type {Array.<Array>}\r\n         * @param {Array} arrayOfWebPImages - Array of webp images.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @todo This method should be deprecated.\r\n         * @example\r\n         * var arrayOfWebPImages = [];\r\n         * arrayOfWebPImages.push({\r\n         *     duration: index,\r\n         *     image: 'data:image/webp;base64,...'\r\n         * });\r\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\r\n         */\r\n        setAdvertisementArray: function(arrayOfWebPImages) {\r\n            config.advertisement = [];\r\n\r\n            var length = arrayOfWebPImages.length;\r\n            for (var i = 0; i < length; i++) {\r\n                config.advertisement.push({\r\n                    duration: i,\r\n                    image: arrayOfWebPImages[i]\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\r\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var blob = this.blob;\r\n         *\r\n         *     // below one is recommended\r\n         *     var blob = this.getBlob();\r\n         * });\r\n         */\r\n        blob: null,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\r\n         * });\r\n         */\r\n        bufferSize: 0,\r\n\r\n        /**\r\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\r\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\r\n         * });\r\n         */\r\n        sampleRate: 0,\r\n\r\n        /**\r\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\r\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @readonly\r\n         * @example\r\n         * recorder.stopRecording(function() {\r\n         *     var arrayBuffer = this.buffer;\r\n         *     alert(arrayBuffer.byteLength);\r\n         * });\r\n         */\r\n        buffer: null,\r\n\r\n        /**\r\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.reset();\r\n         * recorder.startRecording();\r\n         */\r\n        reset: function() {\r\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\r\n                mediaRecorder.clearRecordedData();\r\n            }\r\n            mediaRecorder = null;\r\n            setState('inactive');\r\n            self.blob = null;\r\n        },\r\n\r\n        /**\r\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @instance\r\n         * @example\r\n         * recorder.onStateChanged = function(state) {\r\n         *     console.log('Recorder state: ', state);\r\n         * };\r\n         */\r\n        onStateChanged: function(state) {\r\n            if (!config.disableLogs) {\r\n                console.log('Recorder state changed:', state);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * A recorder can have inactive, recording, paused or stopped states.\r\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * // this looper function will keep you updated about the recorder's states.\r\n         * (function looper() {\r\n         *     document.querySelector('h1').innerHTML = 'Recorder's state is: ' + recorder.state;\r\n         *     if(recorder.state === 'stopped') return; // ignore+stop\r\n         *     setTimeout(looper, 1000); // update after every 3-seconds\r\n         * })();\r\n         * recorder.startRecording();\r\n         */\r\n        state: 'inactive',\r\n\r\n        /**\r\n         * Get recorder's readonly state.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * var state = recorder.getState();\r\n         * @returns {String} Returns recording state.\r\n         */\r\n        getState: function() {\r\n            return self.state;\r\n        },\r\n\r\n        /**\r\n         * Destroy RecordRTC instance. Clear all recorders and objects.\r\n         * @method\r\n         * @memberof RecordRTC\r\n         * @example\r\n         * recorder.destroy();\r\n         */\r\n        destroy: function() {\r\n            var disableLogs = config.disableLogs;\r\n\r\n            config.disableLogs = true;\r\n            self.reset();\r\n            config = {};\r\n            setState('destroyed');\r\n            returnObject = self = null;\r\n\r\n            if (Storage.AudioContextConstructor) {\r\n                Storage.AudioContextConstructor.close();\r\n                Storage.AudioContextConstructor = null;\r\n            }\r\n\r\n            if (!disableLogs) {\r\n                console.warn('RecordRTC is destroyed.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * RecordRTC version number\r\n         * @property {String} version - Release version number.\r\n         * @memberof RecordRTC\r\n         * @static\r\n         * @readonly\r\n         * @example\r\n         * alert(recorder.version);\r\n         */\r\n        version: '5.4.6'\r\n    };\r\n\r\n    if (!this) {\r\n        self = returnObject;\r\n        return returnObject;\r\n    }\r\n\r\n    // if someone wants to use RecordRTC with the \"new\" keyword.\r\n    for (var prop in returnObject) {\r\n        this[prop] = returnObject[prop];\r\n    }\r\n\r\n    self = this;\r\n\r\n    return returnObject;\r\n}\r\n\r\nRecordRTC.version = '5.4.6';\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = RecordRTC;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RecordRTC', [], function() {\r\n        return RecordRTC;\r\n    });\r\n}\n\r\nRecordRTC.getFromDisk = function(type, callback) {\r\n    if (!callback) {\r\n        throw 'callback is mandatory.';\r\n    }\r\n\r\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\r\n    DiskStorage.Fetch(function(dataURL, _type) {\r\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\r\n            callback(dataURL);\r\n        }\r\n\r\n        if (type === 'all' && callback) {\r\n            callback(dataURL, _type.replace('Blob', ''));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof RecordRTC\r\n * @example\r\n * RecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nRecordRTC.writeToDisk = function(options) {\r\n    console.log('Writing recorded blob(s) to disk!');\r\n    options = options || {};\r\n    if (options.audio && options.video && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                options.gif.getDataURL(function(gifDataURL) {\r\n                    DiskStorage.Store({\r\n                        audioBlob: audioDataURL,\r\n                        videoBlob: videoDataURL,\r\n                        gifBlob: gifDataURL\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.video) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.video.getDataURL(function(videoDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    videoBlob: videoDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio && options.gif) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    audioBlob: audioDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.video && options.gif) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            options.gif.getDataURL(function(gifDataURL) {\r\n                DiskStorage.Store({\r\n                    videoBlob: videoDataURL,\r\n                    gifBlob: gifDataURL\r\n                });\r\n            });\r\n        });\r\n    } else if (options.audio) {\r\n        options.audio.getDataURL(function(audioDataURL) {\r\n            DiskStorage.Store({\r\n                audioBlob: audioDataURL\r\n            });\r\n        });\r\n    } else if (options.video) {\r\n        options.video.getDataURL(function(videoDataURL) {\r\n            DiskStorage.Store({\r\n                videoBlob: videoDataURL\r\n            });\r\n        });\r\n    } else if (options.gif) {\r\n        options.gif.getDataURL(function(gifDataURL) {\r\n            DiskStorage.Store({\r\n                gifBlob: gifDataURL\r\n            });\r\n        });\r\n    }\r\n};\n\r\n// __________________________\r\n// RecordRTC-Configuration.js\r\n\r\n/**\r\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCConfiguration\r\n * @class\r\n * @example\r\n * var options = RecordRTCConfiguration(mediaStream, options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\r\n */\r\n\r\nfunction RecordRTCConfiguration(mediaStream, config) {\r\n    if (!config.recorderType && !config.type) {\r\n        if (!!config.audio && !!config.video) {\r\n            config.type = 'video';\r\n        } else if (!!config.audio && !config.video) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    if (config.recorderType && !config.type) {\r\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder) {\r\n            config.type = 'video';\r\n        } else if (config.recorderType === GifRecorder) {\r\n            config.type = 'gif';\r\n        } else if (config.recorderType === StereoAudioRecorder) {\r\n            config.type = 'audio';\r\n        } else if (config.recorderType === MediaStreamRecorder) {\r\n            if (mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\r\n                config.type = 'video';\r\n            } else if (mediaStream.getAudioTracks().length && !mediaStream.getVideoTracks().length) {\r\n                config.type = 'audio';\r\n            } else if (!mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\r\n                config.type = 'audio';\r\n            } else {\r\n                // config.type = 'UnKnown';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if (!config.mimeType) {\r\n            config.mimeType = 'video/webm';\r\n        }\r\n\r\n        if (!config.type) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n\r\n        if (!config.bitsPerSecond) {\r\n            // config.bitsPerSecond = 128000;\r\n        }\r\n    }\r\n\r\n    // consider default type=audio\r\n    if (!config.type) {\r\n        if (config.mimeType) {\r\n            config.type = config.mimeType.split('/')[0];\r\n        }\r\n        if (!config.type) {\r\n            config.type = 'audio';\r\n        }\r\n    }\r\n\r\n    return config;\r\n}\n\r\n// __________________\r\n// GetRecorderType.js\r\n\r\n/**\r\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\r\n * @summary It returns best recorder-type available for your browser.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef GetRecorderType\r\n * @class\r\n * @example\r\n * var RecorderType = GetRecorderType(options);\r\n * var recorder = new RecorderType(options);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction GetRecorderType(mediaStream, config) {\r\n    var recorder;\r\n\r\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\r\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\r\n    if (isChrome || isEdge || isOpera) {\r\n        // Media Stream Recording API has not been implemented in chrome yet;\r\n        // That's why using WebAudio API to record stereo audio in WAV format\r\n        recorder = StereoAudioRecorder;\r\n    }\r\n\r\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\r\n        recorder = MediaStreamRecorder;\r\n    }\r\n\r\n    // video recorder (in WebM format)\r\n    if (config.type === 'video' && (isChrome || isOpera)) {\r\n        recorder = WhammyRecorder;\r\n    }\r\n\r\n    // video recorder (in Gif format)\r\n    if (config.type === 'gif') {\r\n        recorder = GifRecorder;\r\n    }\r\n\r\n    // html2canvas recording!\r\n    if (config.type === 'canvas') {\r\n        recorder = CanvasRecorder;\r\n    }\r\n\r\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\r\n        if ((mediaStream.getVideoTracks && mediaStream.getVideoTracks().length) || (mediaStream.getAudioTracks && mediaStream.getAudioTracks().length)) {\r\n            // audio-only recording\r\n            if (config.type === 'audio') {\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n                // else recorder = StereoAudioRecorder;\r\n            } else {\r\n                // video or screen tracks\r\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\r\n                    recorder = MediaStreamRecorder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (config.recorderType) {\r\n        recorder = config.recorderType;\r\n    }\r\n\r\n    if (mediaStream instanceof Array && mediaStream.length) {\r\n        recorder = MultiStreamRecorder;\r\n    }\r\n\r\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\r\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\r\n    }\r\n\r\n    return recorder;\r\n}\n\r\n// _____________\r\n// MRecordRTC.js\r\n\r\n/**\r\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\r\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef MRecordRTC\r\n * @class\r\n * @example\r\n * var recorder = new MRecordRTC();\r\n * recorder.addStream(MediaStream);\r\n * recorder.mediaType = {\r\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\r\n *     video: true, // or WhammyRecorder or MediaStreamRecorder\r\n *     gif: true    // or GifRecorder\r\n * };\r\n * // mimeType is optional and should be set only in advance cases.\r\n * recorder.mimeType = {\r\n *     audio: 'audio/wav',\r\n *     video: 'video/webm',\r\n *     gif:   'image/gif'\r\n * };\r\n * recorder.startRecording();\r\n * @see For further information:\r\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction MRecordRTC(mediaStream) {\r\n\r\n    /**\r\n     * This method attaches MediaStream object to {@link MRecordRTC}.\r\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.addStream(MediaStream);\r\n     */\r\n    this.addStream = function(_mediaStream) {\r\n        if (_mediaStream) {\r\n            mediaStream = _mediaStream;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\r\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * var recorder = new MRecordRTC();\r\n     * recorder.mediaType = {\r\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\r\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder\r\n     *     gif  : true  // TRUE or GifRecorder\r\n     * };\r\n     */\r\n    this.mediaType = {\r\n        audio: true,\r\n        video: true\r\n    };\r\n\r\n    /**\r\n     * This method starts recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.startRecording();\r\n     */\r\n    this.startRecording = function() {\r\n        var mediaType = this.mediaType;\r\n        var recorderType;\r\n        var mimeType = this.mimeType || {\r\n            audio: null,\r\n            video: null,\r\n            gif: null\r\n        };\r\n\r\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && mediaStream.getAudioTracks && !mediaStream.getAudioTracks().length) {\r\n            mediaType.audio = false;\r\n        }\r\n\r\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\r\n            mediaType.video = false;\r\n        }\r\n\r\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && mediaStream.getVideoTracks && !mediaStream.getVideoTracks().length) {\r\n            mediaType.gif = false;\r\n        }\r\n\r\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\r\n            throw 'MediaStream must have either audio or video tracks.';\r\n        }\r\n\r\n        if (!!mediaType.audio) {\r\n            recorderType = null;\r\n            if (typeof mediaType.audio === 'function') {\r\n                recorderType = mediaType.audio;\r\n            }\r\n\r\n            this.audioRecorder = new RecordRTC(mediaStream, {\r\n                type: 'audio',\r\n                bufferSize: this.bufferSize,\r\n                sampleRate: this.sampleRate,\r\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.audio,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.video) {\r\n                this.audioRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.video) {\r\n            recorderType = null;\r\n            if (typeof mediaType.video === 'function') {\r\n                recorderType = mediaType.video;\r\n            }\r\n\r\n            var newStream = mediaStream;\r\n\r\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\r\n                var videoTrack = mediaStream.getVideoTracks()[0];\r\n\r\n                if (!!navigator.mozGetUserMedia) {\r\n                    newStream = new MediaStream();\r\n                    newStream.addTrack(videoTrack);\r\n\r\n                    if (recorderType && recorderType === WhammyRecorder) {\r\n                        // Firefox does NOT support webp-encoding yet\r\n                        recorderType = MediaStreamRecorder;\r\n                    }\r\n                } else {\r\n                    newStream = new MediaStream([videoTrack]);\r\n                }\r\n            }\r\n\r\n            this.videoRecorder = new RecordRTC(newStream, {\r\n                type: 'video',\r\n                video: this.video,\r\n                canvas: this.canvas,\r\n                frameInterval: this.frameInterval || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.video,\r\n                timeSlice: this.timeSlice,\r\n                onTimeStamp: this.onTimeStamp\r\n            });\r\n\r\n            if (!mediaType.audio) {\r\n                this.videoRecorder.startRecording();\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.audio && !!mediaType.video) {\r\n            var self = this;\r\n\r\n            // this line prevents StereoAudioRecorder\r\n            // todo: fix it\r\n            if (isMediaRecorderCompatible() /* && !this.audioRecorder */ ) {\r\n                self.audioRecorder = null;\r\n                self.videoRecorder.startRecording();\r\n            } else {\r\n                self.videoRecorder.initRecorder(function() {\r\n                    self.audioRecorder.initRecorder(function() {\r\n                        // Both recorders are ready to record things accurately\r\n                        self.videoRecorder.startRecording();\r\n                        self.audioRecorder.startRecording();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!!mediaType.gif) {\r\n            recorderType = null;\r\n            if (typeof mediaType.gif === 'function') {\r\n                recorderType = mediaType.gif;\r\n            }\r\n            this.gifRecorder = new RecordRTC(mediaStream, {\r\n                type: 'gif',\r\n                frameRate: this.frameRate || 200,\r\n                quality: this.quality || 10,\r\n                disableLogs: this.disableLogs,\r\n                recorderType: recorderType,\r\n                mimeType: mimeType.gif\r\n            });\r\n            this.gifRecorder.startRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording.\r\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.stopRecording(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     */\r\n    this.stopRecording = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'audio');\r\n            });\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'video');\r\n            });\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.stopRecording(function(blobURL) {\r\n                callback(blobURL, 'gif');\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method pauses recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.pauseRecording();\r\n     */\r\n    this.pauseRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.pauseRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.pauseRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes recording.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.resumeRecording();\r\n     */\r\n    this.resumeRecording = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.resumeRecording();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.resumeRecording();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs.\r\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getBlob(function(recording){\r\n     *     var audioBlob = recording.audio;\r\n     *     var videoBlob = recording.video;\r\n     *     var gifBlob   = recording.gif;\r\n     * });\r\n     * // or\r\n     * var audioBlob = recorder.getBlob().audio;\r\n     * var videoBlob = recorder.getBlob().video;\r\n     */\r\n    this.getBlob = function(callback) {\r\n        var output = {};\r\n\r\n        if (this.audioRecorder) {\r\n            output.audio = this.audioRecorder.getBlob();\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            output.video = this.videoRecorder.getBlob();\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            output.gif = this.gifRecorder.getBlob();\r\n        }\r\n\r\n        if (callback) {\r\n            callback(output);\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Destroy all recorder instances.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.destroy();\r\n     */\r\n    this.destroy = function() {\r\n        if (this.audioRecorder) {\r\n            this.audioRecorder.destroy();\r\n            this.audioRecorder = null;\r\n        }\r\n\r\n        if (this.videoRecorder) {\r\n            this.videoRecorder.destroy();\r\n            this.videoRecorder = null;\r\n        }\r\n\r\n        if (this.gifRecorder) {\r\n            this.gifRecorder.destroy();\r\n            this.gifRecorder = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to manually get all recorded blobs' DataURLs.\r\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.getDataURL(function(recording){\r\n     *     var audioDataURL = recording.audio;\r\n     *     var videoDataURL = recording.video;\r\n     *     var gifDataURL   = recording.gif;\r\n     * });\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        this.getBlob(function(blob) {\r\n            if (blob.audio && blob.video) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    getDataURL(blob.video, function(_videoDataURL) {\r\n                        callback({\r\n                            audio: _audioDataURL,\r\n                            video: _videoDataURL\r\n                        });\r\n                    });\r\n                });\r\n            } else if (blob.audio) {\r\n                getDataURL(blob.audio, function(_audioDataURL) {\r\n                    callback({\r\n                        audio: _audioDataURL\r\n                    });\r\n                });\r\n            } else if (blob.video) {\r\n                getDataURL(blob.video, function(_videoDataURL) {\r\n                    callback({\r\n                        video: _videoDataURL\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        function getDataURL(blob, callback00) {\r\n            if (typeof Worker !== 'undefined') {\r\n                var webWorker = processInWebWorker(function readFile(_blob) {\r\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\r\n                });\r\n\r\n                webWorker.onmessage = function(event) {\r\n                    callback00(event.data);\r\n                };\r\n\r\n                webWorker.postMessage(blob);\r\n            } else {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(blob);\r\n                reader.onload = function(event) {\r\n                    callback00(event.target.result);\r\n                };\r\n            }\r\n        }\r\n\r\n        function processInWebWorker(_function) {\r\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n                'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n            ], {\r\n                type: 'application/javascript'\r\n            }));\r\n\r\n            var worker = new Worker(blob);\r\n            var url;\r\n            if (typeof URL !== 'undefined') {\r\n                url = URL;\r\n            } else if (typeof webkitURL !== 'undefined') {\r\n                url = webkitURL;\r\n            } else {\r\n                throw 'Neither URL nor webkitURL detected.';\r\n            }\r\n            url.revokeObjectURL(blob);\r\n            return worker;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.writeToDisk();\r\n     */\r\n    this.writeToDisk = function() {\r\n        RecordRTC.writeToDisk({\r\n            audio: this.audioRecorder,\r\n            video: this.videoRecorder,\r\n            gif: this.gifRecorder\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\r\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\r\n     * @method\r\n     * @memberof MRecordRTC\r\n     * @example\r\n     * recorder.save({\r\n     *     audio: 'audio-file-name',\r\n     *     video: 'video-file-name',\r\n     *     gif  : 'gif-file-name'\r\n     * });\r\n     */\r\n    this.save = function(args) {\r\n        args = args || {\r\n            audio: true,\r\n            video: true,\r\n            gif: true\r\n        };\r\n\r\n        if (!!args.audio && this.audioRecorder) {\r\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\r\n        }\r\n\r\n        if (!!args.video && this.videoRecorder) {\r\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\r\n        }\r\n        if (!!args.gif && this.gifRecorder) {\r\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * This method can be used to get all recorded blobs from IndexedDB storage.\r\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\r\n * @param {function} callback - Callback function to get all stored blobs.\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\r\n *     if(type === 'audio') { }\r\n *     if(type === 'video') { }\r\n *     if(type === 'gif')   { }\r\n * });\r\n */\r\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\r\n\r\n/**\r\n * This method can be used to store recorded blobs into IndexedDB storage.\r\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\r\n * @method\r\n * @memberof MRecordRTC\r\n * @example\r\n * MRecordRTC.writeToDisk({\r\n *     audio: audioBlob,\r\n *     video: videoBlob,\r\n *     gif  : gifBlob\r\n * });\r\n */\r\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MRecordRTC = MRecordRTC;\r\n}\n\r\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n(function(that) {\r\n    if (!that) {\r\n        return;\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n        return;\r\n    }\r\n\r\n    if (typeof global === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    global.navigator = {\r\n        userAgent: browserFakeUserAgent,\r\n        getUserMedia: function() {}\r\n    };\r\n\r\n    if (!global.console) {\r\n        global.console = {};\r\n    }\r\n\r\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\r\n        global.console.error = global.console.log = global.console.log || function() {\r\n            console.log(arguments);\r\n        };\r\n    }\r\n\r\n    if (typeof document === 'undefined') {\r\n        /*global document:true */\r\n        that.document = {};\r\n\r\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n            var obj = {\r\n                getContext: function() {\r\n                    return obj;\r\n                },\r\n                play: function() {},\r\n                pause: function() {},\r\n                drawImage: function() {},\r\n                toDataURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n            return obj;\r\n        };\r\n\r\n        that.HTMLVideoElement = function() {};\r\n    }\r\n\r\n    if (typeof location === 'undefined') {\r\n        /*global location:true */\r\n        that.location = {\r\n            protocol: 'file:',\r\n            href: '',\r\n            hash: ''\r\n        };\r\n    }\r\n\r\n    if (typeof screen === 'undefined') {\r\n        /*global screen:true */\r\n        that.screen = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n    }\r\n\r\n    if (typeof URL === 'undefined') {\r\n        /*global screen:true */\r\n        that.URL = {\r\n            createObjectURL: function() {\r\n                return '';\r\n            },\r\n            revokeObjectURL: function() {\r\n                return '';\r\n            }\r\n        };\r\n    }\r\n\r\n    /*global window:true */\r\n    that.window = global;\r\n})(typeof global !== 'undefined' ? global : null);\n\r\n// _____________________________\r\n// Cross-Browser-Declarations.js\r\n\r\n// animation-frame used in WebM recording\r\n\r\n/*jshint -W079 */\r\nvar requestAnimationFrame = window.requestAnimationFrame;\r\nif (typeof requestAnimationFrame === 'undefined') {\r\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = webkitRequestAnimationFrame;\r\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = mozRequestAnimationFrame;\r\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = msRequestAnimationFrame;\r\n    } else if (typeof requestAnimationFrame === 'undefined') {\r\n        // via: https://gist.github.com/paulirish/1579671\r\n        var lastTime = 0;\r\n\r\n        /*global requestAnimationFrame:true */\r\n        requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime();\r\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n            var id = setTimeout(function() {\r\n                callback(currTime + timeToCall);\r\n            }, timeToCall);\r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar cancelAnimationFrame = window.cancelAnimationFrame;\r\nif (typeof cancelAnimationFrame === 'undefined') {\r\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = webkitCancelAnimationFrame;\r\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = mozCancelAnimationFrame;\r\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = msCancelAnimationFrame;\r\n    } else if (typeof cancelAnimationFrame === 'undefined') {\r\n        /*global cancelAnimationFrame:true */\r\n        cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n}\r\n\r\n// WebAudio API representer\r\nvar AudioContext = window.AudioContext;\r\n\r\nif (typeof AudioContext === 'undefined') {\r\n    if (typeof webkitAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    if (typeof mozAudioContext !== 'undefined') {\r\n        /*global AudioContext:true */\r\n        AudioContext = mozAudioContext;\r\n    }\r\n}\r\n\r\n/*jshint -W079 */\r\nvar URL = window.URL;\r\n\r\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n    /*global URL:true */\r\n    URL = webkitURL;\r\n}\r\n\r\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n    }\r\n\r\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n        navigator.getUserMedia = navigator.mozGetUserMedia;\r\n    }\r\n}\r\n\r\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\r\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\nvar isSafari = navigator.userAgent.toLowerCase().indexOf('safari/') > -1;\r\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || isSafari;\r\n\r\nvar MediaStream = window.MediaStream;\r\n\r\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n    MediaStream = webkitMediaStream;\r\n}\r\n\r\n/*global MediaStream:true */\r\nif (typeof MediaStream !== 'undefined') {\r\n    if (!('getVideoTracks' in MediaStream.prototype)) {\r\n        MediaStream.prototype.getVideoTracks = function() {\r\n            if (!this.getTracks) {\r\n                return [];\r\n            }\r\n\r\n            var tracks = [];\r\n            this.getTracks().forEach(function(track) {\r\n                if (track.kind.toString().indexOf('video') !== -1) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n            return tracks;\r\n        };\r\n\r\n        MediaStream.prototype.getAudioTracks = function() {\r\n            if (!this.getTracks) {\r\n                return [];\r\n            }\r\n\r\n            var tracks = [];\r\n            this.getTracks().forEach(function(track) {\r\n                if (track.kind.toString().indexOf('audio') !== -1) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n            return tracks;\r\n        };\r\n    }\r\n\r\n    // override \"stop\" method for all browsers\r\n    if (typeof MediaStream.prototype.stop === 'undefined') {\r\n        MediaStream.prototype.stop = function() {\r\n            this.getTracks().forEach(function(track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }\r\n}\r\n\r\n// below function via: http://goo.gl/B3ae8c\r\n/**\r\n * @param {number} bytes - Pass bytes and get formafted string.\r\n * @returns {string} - formafted string\r\n * @example\r\n * bytesToSize(1024*1024*5) === '5 GB'\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction bytesToSize(bytes) {\r\n    var k = 1000;\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\r\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\r\n}\r\n\r\n/**\r\n * @param {Blob} file - File or Blob object. This parameter is required.\r\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\r\n * @example\r\n * invokeSaveAsDialog(blob or file, [optional] fileName);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\nfunction invokeSaveAsDialog(file, fileName) {\r\n    if (!file) {\r\n        throw 'Blob object is required.';\r\n    }\r\n\r\n    if (!file.type) {\r\n        try {\r\n            file.type = 'video/webm';\r\n        } catch (e) {}\r\n    }\r\n\r\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\r\n\r\n    if (fileName && fileName.indexOf('.') !== -1) {\r\n        var splitted = fileName.split('.');\r\n        fileName = splitted[0];\r\n        fileExtension = splitted[1];\r\n    }\r\n\r\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\r\n\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(file, fileFullName);\r\n    }\r\n\r\n    var hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(file);\r\n    hyperlink.download = fileFullName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n}\r\n\r\n/**\r\n * from: https://github.com/cheton/is-electron/blob/master/index.js\r\n **/\r\nfunction isElectron() {\r\n    // Renderer process\r\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\r\n        return true;\r\n    }\r\n\r\n    // Main process\r\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\r\n        return true;\r\n    }\r\n\r\n    // Detect the user agent when the `nodeIntegration` option is set to true\r\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction setSrcObject(stream, element, ignoreCreateObjectURL) {\r\n    if ('createObjectURL' in URL && !ignoreCreateObjectURL) {\r\n        try {\r\n            element.src = URL.createObjectURL(stream);\r\n        } catch (e) {\r\n            setSrcObject(stream, element, true);\r\n            return;\r\n        }\r\n    } else if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        alert('createObjectURL/srcObject both are not supported.');\r\n    }\r\n}\n\r\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\r\n// Storage.js\r\n\r\n/**\r\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @example\r\n * Storage.AudioContext === webkitAudioContext\r\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Storage = {};\r\n\r\nif (typeof AudioContext !== 'undefined') {\r\n    Storage.AudioContext = AudioContext;\r\n} else if (typeof webkitAudioContext !== 'undefined') {\r\n    Storage.AudioContext = webkitAudioContext;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Storage = Storage;\r\n}\n\r\nfunction isMediaRecorderCompatible() {\r\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\r\n    var isChrome = (!!window.chrome && !isOpera) || isElectron();\r\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\r\n\r\n    if (isFirefox) {\r\n        return true;\r\n    }\r\n\r\n    var nVer = navigator.appVersion;\r\n    var nAgt = navigator.userAgent;\r\n    var fullVersion = '' + parseFloat(navigator.appVersion);\r\n    var majorVersion = parseInt(navigator.appVersion, 10);\r\n    var nameOffset, verOffset, ix;\r\n\r\n    if (isChrome || isOpera) {\r\n        verOffset = nAgt.indexOf('Chrome');\r\n        fullVersion = nAgt.substring(verOffset + 7);\r\n    }\r\n\r\n    // trim the fullVersion string at semicolon/space if present\r\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\r\n        fullVersion = fullVersion.substring(0, ix);\r\n    }\r\n\r\n    majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n    if (isNaN(majorVersion)) {\r\n        fullVersion = '' + parseFloat(navigator.appVersion);\r\n        majorVersion = parseInt(navigator.appVersion, 10);\r\n    }\r\n\r\n    return majorVersion >= 49;\r\n}\n\r\n// ______________________\n// MediaStreamRecorder.js\n\n/**\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var config = {\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     checkForInactiveTracks: true,\n *     timeSlice: 1000, // concatenate intervals based blobs\n *     ondataavailable: function() {}, // get intervals based blobs\n *     ignoreMutedMedia: true\n * }\n * var recorder = new MediaStreamRecorder(mediaStream, config);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n    var self = this;\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    if (typeof MediaRecorder === 'undefined') {\n        throw 'Your browser does not supports Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n    }\n\n    config = config || {\n        // bitsPerSecond: 256 * 8 * 1024,\n        mimeType: 'video/webm'\n    };\n\n    if (config.type === 'audio') {\n        if (mediaStream.getVideoTracks().length && mediaStream.getAudioTracks().length) {\n            var stream;\n            if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(mediaStream.getAudioTracks()[0]);\n            } else {\n                // webkitMediaStream\n                stream = new MediaStream(mediaStream.getAudioTracks());\n            }\n            mediaStream = stream;\n        }\n\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n        }\n\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n            // forcing better codecs on Firefox (via #166)\n            config.mimeType = 'audio/ogg';\n        }\n    }\n\n    var arrayOfBlobs = [];\n\n    /**\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\n     * @returns {Array} Returns array of recorded blobs.\n     */\n    this.getArrayOfBlobs = function() {\n        return arrayOfBlobs;\n    };\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        // set defaults\n        self.blob = null;\n        self.clearRecordedData();\n        self.timestamps = [];\n        allStates = [];\n        arrayOfBlobs = [];\n\n        var recorderHints = config;\n\n        if (!config.disableLogs) {\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\n        }\n\n        if (mediaRecorder) {\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n            mediaRecorder = null;\n        }\n\n        if (isChrome && !isMediaRecorderCompatible()) {\n            // to support video-only recording on stable\n            recorderHints = 'video/vp8';\n        }\n\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n            }\n        }\n\n        // using MediaRecorder API here\n        try {\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n\n            // reset\n            config.mimeType = recorderHints.mimeType;\n        } catch (e) {\n            // chrome-based fallback\n            mediaRecorder = new MediaRecorder(mediaStream);\n        }\n\n        // old hack?\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n            if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n            }\n        }\n\n        // ignore muted/disabled/inactive tracks\n        mediaRecorder.ignoreMutedMedia = config.ignoreMutedMedia === true;\n\n        // Dispatching OnDataAvailable Handler\n        mediaRecorder.ondataavailable = function(e) {\n            if (e.data) {\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n            }\n\n            if (typeof config.timeSlice === 'number') {\n                if (e.data && e.data.size && e.data.size > 100) {\n                    arrayOfBlobs.push(e.data);\n                    updateTimeStamp();\n\n                    if (typeof config.ondataavailable === 'function') {\n                        // intervals based blobs\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                            type: getMimeType(recorderHints)\n                        });\n                        config.ondataavailable(blob);\n                    }\n                }\n                return;\n            }\n\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                    self.recordingCallback(new Blob([], {\n                        type: getMimeType(recorderHints)\n                    }));\n                    self.recordingCallback = null;\n                }\n                return;\n            }\n\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: getMimeType(recorderHints)\n            });\n\n            if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n            }\n        };\n\n        mediaRecorder.onstart = function() {\n            allStates.push('started');\n        };\n\n        mediaRecorder.onpause = function() {\n            allStates.push('paused');\n        };\n\n        mediaRecorder.onresume = function() {\n            allStates.push('resumed');\n        };\n\n        mediaRecorder.onstop = function() {\n            allStates.push('stopped');\n        };\n\n        mediaRecorder.onerror = function(error) {\n            allStates.push('error: ' + error);\n\n            if (!config.disableLogs) {\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n                    console.error('MediaRecorder security error', error);\n                }\n\n                // older code below\n                else if (error.name === 'OutOfMemory') {\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'IllegalStreamModification') {\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'OtherRecordingError') {\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'GenericError') {\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                } else {\n                    console.error('MediaRecorder Error', error);\n                }\n            }\n\n            (function(looper) {\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n                    delete config.timeslice;\n\n                    // 10 minutes, enough?\n                    mediaRecorder.start(10 * 60 * 1000);\n                    return;\n                }\n\n                setTimeout(looper, 1000);\n            })();\n\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n            }\n        };\n\n        if (typeof config.timeSlice === 'number') {\n            updateTimeStamp();\n            mediaRecorder.start(config.timeSlice);\n        } else {\n            // default is 60 minutes; enough?\n            // use config => {timeSlice: 1000} otherwise\n\n            mediaRecorder.start(3.6e+6);\n        }\n\n        if (config.initCallback) {\n            config.initCallback(); // old code\n        }\n    };\n\n    /**\n     * @property {Array} timestamps - Array of time stamps\n     * @memberof MediaStreamRecorder\n     * @example\n     * console.log(recorder.timestamps);\n     */\n    this.timestamps = [];\n\n    function updateTimeStamp() {\n        self.timestamps.push(new Date().getTime());\n\n        if (typeof config.onTimeStamp === 'function') {\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n        }\n    }\n\n    function getMimeType(secondObject) {\n        if (mediaRecorder && mediaRecorder.mimeType) {\n            return mediaRecorder.mimeType;\n        }\n\n        return secondObject.mimeType || 'video/webm';\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.recordingCallback = callback;\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n        }\n\n        if (typeof config.timeSlice === 'number') {\n            setTimeout(function() {\n                self.blob = new Blob(arrayOfBlobs, {\n                    type: getMimeType(config)\n                });\n\n                self.recordingCallback(self.blob);\n            }, 100);\n        }\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\n            self.stop(clearRecordedDataCB);\n        }\n\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        arrayOfBlobs = [];\n        mediaRecorder = null;\n        self.timestamps = [];\n    }\n\n    // Reference to \"MediaRecorder\" object\n    var mediaRecorder;\n\n    /**\n     * Access to native MediaRecorder API\n     * @method\n     * @memberof MediaStreamRecorder\n     * @instance\n     * @example\n     * var internal = recorder.getInternalRecorder();\n     * internal.ondataavailable = function() {}; // override\n     * internal.stream, internal.onpause, internal.onstop, etc.\n     * @returns {Object} Returns internal recording object.\n     */\n    this.getInternalRecorder = function() {\n        return mediaRecorder;\n    };\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function() {\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n\n\n    /**\n     * Get MediaRecorder readonly state.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getState();\n     * @returns {String} Returns recording state.\n     */\n    this.getState = function() {\n        if (!mediaRecorder) {\n            return 'inactive';\n        }\n\n        return mediaRecorder.state || 'inactive';\n    };\n\n    // list of all recording states\n    var allStates = [];\n\n    /**\n     * Get MediaRecorder all recording states.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getAllStates();\n     * @returns {Array} Returns all recording states\n     */\n    this.getAllStates = function() {\n        return allStates;\n    };\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\n    }\n\n    var self = this;\n\n    // this method checks if media stream is stopped\n    // or if any track is ended.\n    (function looper() {\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            self.stop();\n            return;\n        }\n\n        setTimeout(looper, 1000); // check every second\n    })();\n\n    // for debugging\n    this.name = 'MediaStreamRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\r\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\r\n// https://github.com/mattdiamond/Recorderjs#license-mit\r\n// ______________________\r\n// StereoAudioRecorder.js\r\n\r\n/**\r\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\r\n * @summary JavaScript standalone object for stereo audio recording.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef StereoAudioRecorder\r\n * @class\r\n * @example\r\n * var recorder = new StereoAudioRecorder(MediaStream, {\r\n *     sampleRate: 44100,\r\n *     bufferSize: 4096\r\n * });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\r\n */\r\n\r\nfunction StereoAudioRecorder(mediaStream, config) {\r\n    if (!mediaStream.getAudioTracks().length) {\r\n        throw 'Your stream has no audio tracks.';\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var self = this;\r\n\r\n    // variables\r\n    var leftchannel = [];\r\n    var rightchannel = [];\r\n    var recording = false;\r\n    var recordingLength = 0;\r\n    var jsAudioNode;\r\n\r\n    var numberOfAudioChannels = 2;\r\n\r\n    /**\r\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\r\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\r\n     * @memberof StereoAudioRecorder\r\n     * @instance\r\n     * @example\r\n     * var recorder = StereoAudioRecorder(mediaStream, {\r\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\r\n     * });\r\n     */\r\n    var desiredSampRate = config.desiredSampRate;\r\n\r\n    // backward compatibility\r\n    if (config.leftChannel === true) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (config.numberOfAudioChannels === 1) {\r\n        numberOfAudioChannels = 1;\r\n    }\r\n\r\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\r\n        numberOfAudioChannels = 2;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('StereoAudioRecorder is set to record number of channels: ', numberOfAudioChannels);\r\n    }\r\n\r\n    // if any Track within the MediaStream is muted or not enabled at any time, \r\n    // the browser will only record black frames \r\n    // or silence since that is the content produced by the Track\r\n    // so we need to stopRecording as soon as any single track ends.\r\n    if (typeof config.checkForInactiveTracks === 'undefined') {\r\n        config.checkForInactiveTracks = true;\r\n    }\r\n\r\n    function isMediaStreamActive() {\r\n        if (config.checkForInactiveTracks === false) {\r\n            // always return \"true\"\r\n            return true;\r\n        }\r\n\r\n        if ('active' in mediaStream) {\r\n            if (!mediaStream.active) {\r\n                return false;\r\n            }\r\n        } else if ('ended' in mediaStream) { // old hack\r\n            if (mediaStream.ended) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        resetVariables();\r\n\r\n        isAudioProcessStarted = isPaused = false;\r\n        recording = true;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            looper();\r\n        }\r\n    };\r\n\r\n    function mergeLeftRightBuffers(config, callback) {\r\n        function mergeAudioBuffers(config, cb) {\r\n            var numberOfAudioChannels = config.numberOfAudioChannels;\r\n\r\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\r\n            var leftBuffers = config.leftBuffers.slice(0);\r\n            var rightBuffers = config.rightBuffers.slice(0);\r\n            var sampleRate = config.sampleRate;\r\n            var internalInterleavedLength = config.internalInterleavedLength;\r\n            var desiredSampRate = config.desiredSampRate;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\r\n\r\n                if (desiredSampRate) {\r\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\r\n                }\r\n            }\r\n\r\n            // set sample rate as desired sample rate\r\n            if (desiredSampRate) {\r\n                sampleRate = desiredSampRate;\r\n            }\r\n\r\n            // for changing the sampling rate, reference:\r\n            // http://stackoverflow.com/a/28977136/552182\r\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\r\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\r\n                var newData = [];\r\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\r\n                newData[0] = data[0];\r\n                for (var i = 1; i < fitCount - 1; i++) {\r\n                    var tmp = i * springFactor;\r\n                    var before = Number(Math.floor(tmp)).toFixed();\r\n                    var after = Number(Math.ceil(tmp)).toFixed();\r\n                    var atPoint = tmp - before;\r\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\r\n                }\r\n                newData[fitCount - 1] = data[data.length - 1];\r\n                return newData;\r\n            }\r\n\r\n            function linearInterpolate(before, after, atPoint) {\r\n                return before + (after - before) * atPoint;\r\n            }\r\n\r\n            function mergeBuffers(channelBuffer, rLength) {\r\n                var result = new Float64Array(rLength);\r\n                var offset = 0;\r\n                var lng = channelBuffer.length;\r\n\r\n                for (var i = 0; i < lng; i++) {\r\n                    var buffer = channelBuffer[i];\r\n                    result.set(buffer, offset);\r\n                    offset += buffer.length;\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            function interleave(leftChannel, rightChannel) {\r\n                var length = leftChannel.length + rightChannel.length;\r\n\r\n                var result = new Float64Array(length);\r\n\r\n                var inputIndex = 0;\r\n\r\n                for (var index = 0; index < length;) {\r\n                    result[index++] = leftChannel[inputIndex];\r\n                    result[index++] = rightChannel[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function writeUTFBytes(view, offset, string) {\r\n                var lng = string.length;\r\n                for (var i = 0; i < lng; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            // interleave both channels together\r\n            var interleaved;\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                interleaved = interleave(leftBuffers, rightBuffers);\r\n            }\r\n\r\n            if (numberOfAudioChannels === 1) {\r\n                interleaved = leftBuffers;\r\n            }\r\n\r\n            var interleavedLength = interleaved.length;\r\n\r\n            // create wav file\r\n            var resultingBufferLength = 44 + interleavedLength * 2;\r\n\r\n            var buffer = new ArrayBuffer(resultingBufferLength);\r\n\r\n            var view = new DataView(buffer);\r\n\r\n            // RIFF chunk descriptor/identifier \r\n            writeUTFBytes(view, 0, 'RIFF');\r\n\r\n            // RIFF chunk length\r\n            view.setUint32(4, 44 + interleavedLength * 2, true);\r\n\r\n            // RIFF type \r\n            writeUTFBytes(view, 8, 'WAVE');\r\n\r\n            // format chunk identifier \r\n            // FMT sub-chunk\r\n            writeUTFBytes(view, 12, 'fmt ');\r\n\r\n            // format chunk length \r\n            view.setUint32(16, 16, true);\r\n\r\n            // sample format (raw)\r\n            view.setUint16(20, 1, true);\r\n\r\n            // stereo (2 channels)\r\n            view.setUint16(22, numberOfAudioChannels, true);\r\n\r\n            // sample rate \r\n            view.setUint32(24, sampleRate, true);\r\n\r\n            // byte rate (sample rate * block align)\r\n            view.setUint32(28, sampleRate * 2, true);\r\n\r\n            // block align (channel count * bytes per sample) \r\n            view.setUint16(32, numberOfAudioChannels * 2, true);\r\n\r\n            // bits per sample \r\n            view.setUint16(34, 16, true);\r\n\r\n            // data sub-chunk\r\n            // data chunk identifier \r\n            writeUTFBytes(view, 36, 'data');\r\n\r\n            // data chunk length \r\n            view.setUint32(40, interleavedLength * 2, true);\r\n\r\n            // write the PCM samples\r\n            var lng = interleavedLength;\r\n            var index = 44;\r\n            var volume = 1;\r\n            for (var i = 0; i < lng; i++) {\r\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\r\n                index += 2;\r\n            }\r\n\r\n            if (cb) {\r\n                return cb({\r\n                    buffer: buffer,\r\n                    view: view\r\n                });\r\n            }\r\n\r\n            postMessage({\r\n                buffer: buffer,\r\n                view: view\r\n            });\r\n        }\r\n\r\n        if (isEdge || isOpera || isSafari || config.noWorker) {\r\n            mergeAudioBuffers(config, function(data) {\r\n                callback(data.buffer, data.view);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        var webWorker = processInWebWorker(mergeAudioBuffers);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            callback(event.data.buffer, event.data.view);\r\n\r\n            // release memory\r\n            URL.revokeObjectURL(webWorker.workerURL);\r\n        };\r\n\r\n        webWorker.postMessage(config);\r\n    }\r\n\r\n    function processInWebWorker(_function) {\r\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\r\n            ';this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(workerURL);\r\n        worker.workerURL = workerURL;\r\n        return worker;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        // stop recording\r\n        recording = false;\r\n\r\n        mergeLeftRightBuffers({\r\n            desiredSampRate: desiredSampRate,\r\n            sampleRate: sampleRate,\r\n            numberOfAudioChannels: numberOfAudioChannels,\r\n            internalInterleavedLength: recordingLength,\r\n            leftBuffers: leftchannel,\r\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel\r\n        }, function(buffer, view) {\r\n            /**\r\n             * @property {Blob} blob - The recorded blob object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            self.blob = new Blob([view], {\r\n                type: 'audio/wav'\r\n            });\r\n\r\n            /**\r\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var buffer = recorder.buffer;\r\n             * });\r\n             */\r\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\r\n\r\n            /**\r\n             * @property {DataView} view - The recorded data-view object.\r\n             * @memberof StereoAudioRecorder\r\n             * @example\r\n             * recorder.stop(function(){\r\n             *     var view = recorder.view;\r\n             * });\r\n             */\r\n            self.view = view;\r\n\r\n            self.sampleRate = desiredSampRate || sampleRate;\r\n            self.bufferSize = bufferSize;\r\n\r\n            // recorded audio length\r\n            self.length = recordingLength;\r\n\r\n            isAudioProcessStarted = false;\r\n\r\n            if (callback) {\r\n                callback(self.blob);\r\n            }\r\n        });\r\n    };\r\n\r\n    if (!Storage.AudioContextConstructor) {\r\n        Storage.AudioContextConstructor = new Storage.AudioContext();\r\n    }\r\n\r\n    var context = Storage.AudioContextConstructor;\r\n\r\n    // creates an audio node from the microphone incoming stream\r\n    var audioInput = context.createMediaStreamSource(mediaStream);\r\n\r\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n\r\n    /**\r\n     * From the spec: This value controls how frequently the audioprocess event is\r\n     * dispatched and how many sample-frames need to be processed each call.\r\n     * Lower values for buffer size will result in a lower (better) latency.\r\n     * Higher values will be necessary to avoid audio breakup and glitches\r\n     * The size of the buffer (in sample-frames) which needs to\r\n     * be processed each time onprocessaudio is called.\r\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\r\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     bufferSize: 4096\r\n     * });\r\n     */\r\n\r\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\r\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\r\n\r\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\r\n        if (!config.disableLogs) {\r\n            console.warn('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\r\n        }\r\n    }\r\n\r\n    if (context.createJavaScriptNode) {\r\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else if (context.createScriptProcessor) {\r\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\r\n    } else {\r\n        throw 'WebAudio API has no support on this browser.';\r\n    }\r\n\r\n    // connect the stream to the script processor\r\n    audioInput.connect(jsAudioNode);\r\n\r\n    if (!config.bufferSize) {\r\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\r\n    }\r\n\r\n    /**\r\n     * The sample rate (in sample-frames per second) at which the\r\n     * AudioContext handles audio. It is assumed that all AudioNodes\r\n     * in the context run at this rate. In making this assumption,\r\n     * sample-rate converters or \"varispeed\" processors are not supported\r\n     * in real-time processing.\r\n     * The sampleRate parameter describes the sample-rate of the\r\n     * linear PCM audio data in the buffer in sample-frames per second.\r\n     * An implementation must support sample-rates in at least\r\n     * the range 22050 to 96000.\r\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder = new StereoAudioRecorder(mediaStream, {\r\n     *     sampleRate: 44100\r\n     * });\r\n     */\r\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\r\n\r\n    if (sampleRate < 22050 || sampleRate > 96000) {\r\n        // Ref: http://stackoverflow.com/a/26303918/552182\r\n        if (!config.disableLogs) {\r\n            console.warn('sample-rate must be under range 22050 and 96000.');\r\n        }\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('sample-rate', sampleRate);\r\n        console.log('buffer-size', bufferSize);\r\n\r\n        if (config.desiredSampRate) {\r\n            console.log('Desired sample-rate', config.desiredSampRate);\r\n        }\r\n    }\r\n\r\n    var isPaused = false;\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPaused = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (isMediaStreamActive() === false) {\r\n            throw 'Please make sure MediaStream is active.';\r\n        }\r\n\r\n        if (!recording) {\r\n            if (!config.disableLogs) {\r\n                console.log('Seems recording has been restarted.');\r\n            }\r\n            this.record();\r\n            return;\r\n        }\r\n\r\n        isPaused = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof StereoAudioRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        config.checkForInactiveTracks = false;\r\n\r\n        if (recording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function resetVariables() {\r\n        leftchannel = [];\r\n        rightchannel = [];\r\n        recordingLength = 0;\r\n        isAudioProcessStarted = false;\r\n        recording = false;\r\n        isPaused = false;\r\n        context = null;\r\n\r\n        self.leftchannel = leftchannel;\r\n        self.rightchannel = rightchannel;\r\n        self.numberOfAudioChannels = numberOfAudioChannels;\r\n        self.desiredSampRate = desiredSampRate;\r\n        self.sampleRate = sampleRate;\r\n        self.recordingLength = recordingLength;\r\n\r\n        intervalsBasedBuffers = {\r\n            left: [],\r\n            right: [],\r\n            recordingLength: 0\r\n        };\r\n    }\r\n\r\n    function clearRecordedDataCB() {\r\n        if (jsAudioNode) {\r\n            jsAudioNode.onaudioprocess = null;\r\n            jsAudioNode.disconnect();\r\n            jsAudioNode = null;\r\n        }\r\n\r\n        if (audioInput) {\r\n            audioInput.disconnect();\r\n            audioInput = null;\r\n        }\r\n\r\n        resetVariables();\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'StereoAudioRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var isAudioProcessStarted = false;\r\n\r\n    function onAudioProcessDataAvailable(e) {\r\n        if (isPaused) {\r\n            return;\r\n        }\r\n\r\n        if (isMediaStreamActive() === false) {\r\n            if (!config.disableLogs) {\r\n                console.log('MediaStream seems stopped.');\r\n            }\r\n            jsAudioNode.disconnect();\r\n            recording = false;\r\n        }\r\n\r\n        if (!recording) {\r\n            if (audioInput) {\r\n                audioInput.disconnect();\r\n                audioInput = null;\r\n            }\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * This method is called on \"onaudioprocess\" event's first invocation.\r\n         * @method {function} onAudioProcessStarted\r\n         * @memberof StereoAudioRecorder\r\n         * @example\r\n         * recorder.onAudioProcessStarted: function() { };\r\n         */\r\n        if (!isAudioProcessStarted) {\r\n            isAudioProcessStarted = true;\r\n            if (config.onAudioProcessStarted) {\r\n                config.onAudioProcessStarted();\r\n            }\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        }\r\n\r\n        var left = e.inputBuffer.getChannelData(0);\r\n\r\n        // we clone the samples\r\n        var chLeft = new Float32Array(left);\r\n        leftchannel.push(chLeft);\r\n\r\n        if (numberOfAudioChannels === 2) {\r\n            var right = e.inputBuffer.getChannelData(1);\r\n            var chRight = new Float32Array(right);\r\n            rightchannel.push(chRight);\r\n        }\r\n\r\n        recordingLength += bufferSize;\r\n\r\n        // export raw PCM\r\n        self.recordingLength = recordingLength;\r\n\r\n        if (typeof config.timeSlice !== 'undefined') {\r\n            intervalsBasedBuffers.recordingLength += bufferSize;\r\n            intervalsBasedBuffers.left.push(chLeft);\r\n\r\n            if (numberOfAudioChannels === 2) {\r\n                intervalsBasedBuffers.right.push(chRight);\r\n            }\r\n        }\r\n    }\r\n\r\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\r\n\r\n    // to prevent self audio to be connected with speakers\r\n    jsAudioNode.connect(context.destination);\r\n\r\n    // export raw PCM\r\n    this.leftchannel = leftchannel;\r\n    this.rightchannel = rightchannel;\r\n    this.numberOfAudioChannels = numberOfAudioChannels;\r\n    this.desiredSampRate = desiredSampRate;\r\n    this.sampleRate = sampleRate;\r\n    self.recordingLength = recordingLength;\r\n\r\n    // helper for intervals based blobs\r\n    var intervalsBasedBuffers = {\r\n        left: [],\r\n        right: [],\r\n        recordingLength: 0\r\n    };\r\n\r\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\r\n    function looper() {\r\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (intervalsBasedBuffers.left.length) {\r\n            mergeLeftRightBuffers({\r\n                desiredSampRate: desiredSampRate,\r\n                sampleRate: sampleRate,\r\n                numberOfAudioChannels: numberOfAudioChannels,\r\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\r\n                leftBuffers: intervalsBasedBuffers.left,\r\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\r\n            }, function(buffer, view) {\r\n                var blob = new Blob([view], {\r\n                    type: 'audio/wav'\r\n                });\r\n                config.ondataavailable(blob);\r\n\r\n                setTimeout(looper, config.timeSlice);\r\n            });\r\n\r\n            intervalsBasedBuffers = {\r\n                left: [],\r\n                right: [],\r\n                recordingLength: 0\r\n            };\r\n        } else {\r\n            setTimeout(looper, config.timeSlice);\r\n        }\r\n    }\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\r\n}\r\n\r\n// _________________\r\n// CanvasRecorder.js\r\n\r\n/**\r\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\r\n * @summary HTML2Canvas recording into video WebM.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef CanvasRecorder\r\n * @class\r\n * @example\r\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\r\n * @param {object} config - {disableLogs:true, initCallback: function}\r\n */\r\n\r\nfunction CanvasRecorder(htmlElement, config) {\r\n    if (typeof html2canvas === 'undefined') {\r\n        throw 'Please link: https://cdn.webrtc-experiment.com/screenshot.js';\r\n    }\r\n\r\n    config = config || {};\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    // via DetectRTC.js\r\n    var isCanvasSupportsStreamCapturing = false;\r\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n        if (item in document.createElement('canvas')) {\r\n            isCanvasSupportsStreamCapturing = true;\r\n        }\r\n    });\r\n\r\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\r\n\r\n    var chromeVersion = 50;\r\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n    if (_isChrome && matchArray && matchArray[2]) {\r\n        chromeVersion = parseInt(matchArray[2], 10);\r\n    }\r\n\r\n    if (_isChrome && chromeVersion < 52) {\r\n        isCanvasSupportsStreamCapturing = false;\r\n    }\r\n\r\n    var globalCanvas, mediaStreamRecorder;\r\n\r\n    if (isCanvasSupportsStreamCapturing) {\r\n        if (!config.disableLogs) {\r\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\r\n        }\r\n\r\n        if (htmlElement instanceof HTMLCanvasElement) {\r\n            globalCanvas = htmlElement;\r\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\r\n            globalCanvas = htmlElement.canvas;\r\n        } else {\r\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\r\n        }\r\n    } else if (!!navigator.mozGetUserMedia) {\r\n        if (!config.disableLogs) {\r\n            console.error('Canvas recording is NOT supported in Firefox.');\r\n        }\r\n    }\r\n\r\n    var isRecording;\r\n\r\n    /**\r\n     * This method records Canvas.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        isRecording = true;\r\n\r\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\r\n            // CanvasCaptureMediaStream\r\n            var canvasMediaStream;\r\n            if ('captureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\r\n            } else if ('mozCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\r\n            } else if ('webkitCaptureStream' in globalCanvas) {\r\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\r\n            }\r\n\r\n            try {\r\n                var mdStream = new MediaStream();\r\n                mdStream.addTrack(canvasMediaStream.getVideoTracks()[0]);\r\n                canvasMediaStream = mdStream;\r\n            } catch (e) {}\r\n\r\n            if (!canvasMediaStream) {\r\n                throw 'captureStream API are NOT available.';\r\n            }\r\n\r\n            // Note: Jan 18, 2016 status is that, \r\n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\r\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\r\n                mimeType: 'video/webm'\r\n            });\r\n            mediaStreamRecorder.record();\r\n        } else {\r\n            whammy.frames = [];\r\n            lastTime = new Date().getTime();\r\n            drawCanvasFrame();\r\n        }\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    this.getWebPImages = function(callback) {\r\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        var framesLength = whammy.frames.length;\r\n        whammy.frames.forEach(function(frame, idx) {\r\n            var framesRemaining = framesLength - idx;\r\n            if (!config.disableLogs) {\r\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\r\n            }\r\n\r\n            if (config.onEncodingCallback) {\r\n                config.onEncodingCallback(framesRemaining, framesLength);\r\n            }\r\n\r\n            var webp = frame.image.toDataURL('image/webp', 1);\r\n            whammy.frames[idx].image = webp;\r\n        });\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('Generating WebM');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    /**\r\n     * This method stops recording Canvas.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        isRecording = false;\r\n\r\n        var that = this;\r\n\r\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\r\n            mediaStreamRecorder.stop(callback);\r\n            return;\r\n        }\r\n\r\n        this.getWebPImages(function() {\r\n            /**\r\n             * @property {Blob} blob - Recorded frames in video/webm blob.\r\n             * @memberof CanvasRecorder\r\n             * @example\r\n             * recorder.stop(function() {\r\n             *     var blob = recorder.blob;\r\n             * });\r\n             */\r\n            whammy.compile(function(blob) {\r\n                if (!config.disableLogs) {\r\n                    console.log('Recording finished!');\r\n                }\r\n\r\n                that.blob = blob;\r\n\r\n                if (that.blob.forEach) {\r\n                    that.blob = new Blob([], {\r\n                        type: 'video/webm'\r\n                    });\r\n                }\r\n\r\n                if (callback) {\r\n                    callback(that.blob);\r\n                }\r\n\r\n                whammy.frames = [];\r\n            });\r\n        });\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.pause();\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\r\n            mediaStreamRecorder.resume();\r\n            return;\r\n        }\r\n\r\n        if (!isRecording) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof CanvasRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (isRecording) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isRecording = false;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'CanvasRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    function cloneCanvas() {\r\n        //create a new canvas\r\n        var newCanvas = document.createElement('canvas');\r\n        var context = newCanvas.getContext('2d');\r\n\r\n        //set dimensions\r\n        newCanvas.width = htmlElement.width;\r\n        newCanvas.height = htmlElement.height;\r\n\r\n        //apply the old canvas to the new one\r\n        context.drawImage(htmlElement, 0, 0);\r\n\r\n        //return the new canvas\r\n        return newCanvas;\r\n    }\r\n\r\n    function drawCanvasFrame() {\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawCanvasFrame, 500);\r\n        }\r\n\r\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\r\n            var duration = new Date().getTime() - lastTime;\r\n            // via #206, by Jack i.e. @Seymourr\r\n            lastTime = new Date().getTime();\r\n\r\n            whammy.frames.push({\r\n                image: cloneCanvas(),\r\n                duration: duration\r\n            });\r\n\r\n            if (isRecording) {\r\n                setTimeout(drawCanvasFrame, config.frameInterval);\r\n            }\r\n            return;\r\n        }\r\n\r\n        html2canvas(htmlElement, {\r\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\r\n            onrendered: function(canvas) {\r\n                var duration = new Date().getTime() - lastTime;\r\n                if (!duration) {\r\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n\r\n                // via #206, by Jack i.e. @Seymourr\r\n                lastTime = new Date().getTime();\r\n\r\n                whammy.frames.push({\r\n                    image: canvas.toDataURL('image/webp', 1),\r\n                    duration: duration\r\n                });\r\n\r\n                if (isRecording) {\r\n                    setTimeout(drawCanvasFrame, config.frameInterval);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    var lastTime = new Date().getTime();\r\n\r\n    var whammy = new Whammy.Video(100);\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.CanvasRecorder = CanvasRecorder;\r\n}\n\r\n// _________________\r\n// WhammyRecorder.js\r\n\r\n/**\r\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\r\n * @summary Video recording feature in Chrome.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef WhammyRecorder\r\n * @class\r\n * @example\r\n * var recorder = new WhammyRecorder(mediaStream);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\r\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\r\n */\r\n\r\nfunction WhammyRecorder(mediaStream, config) {\r\n\r\n    config = config || {};\r\n\r\n    if (!config.frameInterval) {\r\n        config.frameInterval = 10;\r\n    }\r\n\r\n    if (!config.disableLogs) {\r\n        console.log('Using frames-interval:', config.frameInterval);\r\n    }\r\n\r\n    /**\r\n     * This method records video.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (!config.width) {\r\n            config.width = 320;\r\n        }\r\n\r\n        if (!config.height) {\r\n            config.height = 240;\r\n        }\r\n\r\n        if (!config.video) {\r\n            config.video = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        if (!config.canvas) {\r\n            config.canvas = {\r\n                width: config.width,\r\n                height: config.height\r\n            };\r\n        }\r\n\r\n        canvas.width = config.canvas.width || 320;\r\n        canvas.height = config.canvas.height || 240;\r\n\r\n        context = canvas.getContext('2d');\r\n\r\n        // setting defaults\r\n        if (config.video && config.video instanceof HTMLVideoElement) {\r\n            video = config.video.cloneNode();\r\n\r\n            if (config.initCallback) {\r\n                config.initCallback();\r\n            }\r\n        } else {\r\n            video = document.createElement('video');\r\n\r\n            setSrcObject(mediaStream, video);\r\n\r\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\r\n                if (config.initCallback) {\r\n                    config.initCallback();\r\n                }\r\n            };\r\n\r\n            video.width = config.video.width;\r\n            video.height = config.video.height;\r\n        }\r\n\r\n        video.muted = true;\r\n        video.play();\r\n\r\n        lastTime = new Date().getTime();\r\n        whammy = new Whammy.Video();\r\n\r\n        if (!config.disableLogs) {\r\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\r\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\r\n        }\r\n\r\n        drawFrames(config.frameInterval);\r\n    };\r\n\r\n    /**\r\n     * Draw and push frames to Whammy\r\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\r\n     */\r\n    function drawFrames(frameInterval) {\r\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\r\n\r\n        var duration = new Date().getTime() - lastTime;\r\n        if (!duration) {\r\n            return setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n\r\n        if (isPausedRecording) {\r\n            lastTime = new Date().getTime();\r\n            return setTimeout(drawFrames, 100);\r\n        }\r\n\r\n        // via #206, by Jack i.e. @Seymourr\r\n        lastTime = new Date().getTime();\r\n\r\n        if (video.paused) {\r\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n            // Tweak for Android Chrome\r\n            video.play();\r\n        }\r\n\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        whammy.frames.push({\r\n            duration: duration,\r\n            image: canvas.toDataURL('image/webp')\r\n        });\r\n\r\n        if (!isStopDrawing) {\r\n            setTimeout(drawFrames, frameInterval, frameInterval);\r\n        }\r\n    }\r\n\r\n    function asyncLoop(o) {\r\n        var i = -1,\r\n            length = o.length;\r\n\r\n        (function loop() {\r\n            i++;\r\n            if (i === length) {\r\n                o.callback();\r\n                return;\r\n            }\r\n\r\n            // \"setTimeout\" added by Jim McLeod\r\n            setTimeout(function() {\r\n                o.functionToLoop(loop, i);\r\n            }, 1);\r\n        })();\r\n    }\r\n\r\n\r\n    /**\r\n     * remove black frames from the beginning to the specified frame\r\n     * @param {Array} _frames - array of frames to be checked\r\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\r\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\r\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\r\n     * @returns {Array} - array of frames\r\n     */\r\n    // pull#293 by @volodalexey\r\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\r\n        var localCanvas = document.createElement('canvas');\r\n        localCanvas.width = canvas.width;\r\n        localCanvas.height = canvas.height;\r\n        var context2d = localCanvas.getContext('2d');\r\n        var resultFrames = [];\r\n\r\n        var checkUntilNotBlack = _framesToCheck === -1;\r\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\r\n            _framesToCheck : _frames.length;\r\n        var sampleColor = {\r\n            r: 0,\r\n            g: 0,\r\n            b: 0\r\n        };\r\n        var maxColorDifference = Math.sqrt(\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2) +\r\n            Math.pow(255, 2)\r\n        );\r\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\r\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\r\n        var doNotCheckNext = false;\r\n\r\n        asyncLoop({\r\n            length: endCheckFrame,\r\n            functionToLoop: function(loop, f) {\r\n                var matchPixCount, endPixCheck, maxPixCount;\r\n\r\n                var finishImage = function() {\r\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\r\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\r\n                    } else {\r\n                        // console.log('frame is passed : ' + f);\r\n                        if (checkUntilNotBlack) {\r\n                            doNotCheckNext = true;\r\n                        }\r\n                        resultFrames.push(_frames[f]);\r\n                    }\r\n                    loop();\r\n                };\r\n\r\n                if (!doNotCheckNext) {\r\n                    var image = new Image();\r\n                    image.onload = function() {\r\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\r\n                        matchPixCount = 0;\r\n                        endPixCheck = imageData.data.length;\r\n                        maxPixCount = imageData.data.length / 4;\r\n\r\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\r\n                            var currentColor = {\r\n                                r: imageData.data[pix],\r\n                                g: imageData.data[pix + 1],\r\n                                b: imageData.data[pix + 2]\r\n                            };\r\n                            var colorDifference = Math.sqrt(\r\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\r\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\r\n                                Math.pow(currentColor.b - sampleColor.b, 2)\r\n                            );\r\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\r\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\r\n                                matchPixCount++;\r\n                            }\r\n                        }\r\n                        finishImage();\r\n                    };\r\n                    image.src = _frames[f].image;\r\n                } else {\r\n                    finishImage();\r\n                }\r\n            },\r\n            callback: function() {\r\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\r\n\r\n                if (resultFrames.length <= 0) {\r\n                    // at least one last frame should be available for next manipulation\r\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\r\n                    resultFrames.push(_frames[_frames.length - 1]);\r\n                }\r\n                callback(resultFrames);\r\n            }\r\n        });\r\n    }\r\n\r\n    var isStopDrawing = false;\r\n\r\n    /**\r\n     * This method stops recording video.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        isStopDrawing = true;\r\n\r\n        var _this = this;\r\n        // analyse of all frames takes some time!\r\n        setTimeout(function() {\r\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\r\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\r\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\r\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\r\n                whammy.frames = frames;\r\n\r\n                // to display advertisement images!\r\n                if (config.advertisement && config.advertisement.length) {\r\n                    whammy.frames = config.advertisement.concat(whammy.frames);\r\n                }\r\n\r\n                /**\r\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\r\n                 * @memberof WhammyRecorder\r\n                 * @example\r\n                 * recorder.stop(function() {\r\n                 *     var blob = recorder.blob;\r\n                 * });\r\n                 */\r\n                whammy.compile(function(blob) {\r\n                    _this.blob = blob;\r\n\r\n                    if (_this.blob.forEach) {\r\n                        _this.blob = new Blob([], {\r\n                            type: 'video/webm'\r\n                        });\r\n                    }\r\n\r\n                    if (callback) {\r\n                        callback(_this.blob);\r\n                    }\r\n                });\r\n            });\r\n        }, 10);\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n\r\n        if (isStopDrawing) {\r\n            this.record();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof WhammyRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (!isStopDrawing) {\r\n            this.stop(clearRecordedDataCB);\r\n        }\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        whammy.frames = [];\r\n        isStopDrawing = true;\r\n        isPausedRecording = false;\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'WhammyRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    var video;\r\n    var lastTime;\r\n    var whammy;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.WhammyRecorder = WhammyRecorder;\r\n}\n\r\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\r\n// _________\r\n// Whammy.js\r\n\r\n// todo: Firefox now supports webp for webm containers!\r\n// their MediaRecorder implementation works well!\r\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\r\n\r\n/**\r\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\r\n * @summary A real time javascript webm encoder based on a canvas hack.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef Whammy\r\n * @class\r\n * @example\r\n * var recorder = new Whammy().Video(15);\r\n * recorder.add(context || canvas || dataURL);\r\n * var output = recorder.compile();\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\nvar Whammy = (function() {\r\n    // a more abstract-ish API\r\n\r\n    function WhammyVideo(duration) {\r\n        this.frames = [];\r\n        this.duration = duration || 1;\r\n        this.quality = 0.8;\r\n    }\r\n\r\n    /**\r\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.add(canvas || context || 'image/webp');\r\n     * @param {string} frame - Canvas || Context || image/webp\r\n     * @param {number} duration - Stick a duration (in milliseconds)\r\n     */\r\n    WhammyVideo.prototype.add = function(frame, duration) {\r\n        if ('canvas' in frame) { //CanvasRenderingContext2D\r\n            frame = frame.canvas;\r\n        }\r\n\r\n        if ('toDataURL' in frame) {\r\n            frame = frame.toDataURL('image/webp', this.quality);\r\n        }\r\n\r\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\r\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\r\n        }\r\n        this.frames.push({\r\n            image: frame,\r\n            duration: duration || this.duration\r\n        });\r\n    };\r\n\r\n    function processInWebWorker(_function) {\r\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\r\n            'this.onmessage =  function (e) {' + _function.name + '(e.data);}'\r\n        ], {\r\n            type: 'application/javascript'\r\n        }));\r\n\r\n        var worker = new Worker(blob);\r\n        URL.revokeObjectURL(blob);\r\n        return worker;\r\n    }\r\n\r\n    function whammyInWebWorker(frames) {\r\n        function ArrayToWebM(frames) {\r\n            var info = checkFrames(frames);\r\n            if (!info) {\r\n                return [];\r\n            }\r\n\r\n            var clusterMaxDuration = 30000;\r\n\r\n            var EBML = [{\r\n                'id': 0x1a45dfa3, // EBML\r\n                'data': [{\r\n                    'data': 1,\r\n                    'id': 0x4286 // EBMLVersion\r\n                }, {\r\n                    'data': 1,\r\n                    'id': 0x42f7 // EBMLReadVersion\r\n                }, {\r\n                    'data': 4,\r\n                    'id': 0x42f2 // EBMLMaxIDLength\r\n                }, {\r\n                    'data': 8,\r\n                    'id': 0x42f3 // EBMLMaxSizeLength\r\n                }, {\r\n                    'data': 'webm',\r\n                    'id': 0x4282 // DocType\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4287 // DocTypeVersion\r\n                }, {\r\n                    'data': 2,\r\n                    'id': 0x4285 // DocTypeReadVersion\r\n                }]\r\n            }, {\r\n                'id': 0x18538067, // Segment\r\n                'data': [{\r\n                    'id': 0x1549a966, // Info\r\n                    'data': [{\r\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\r\n                        'id': 0x2ad7b1 // TimecodeScale\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x4d80 // MuxingApp\r\n                    }, {\r\n                        'data': 'whammy',\r\n                        'id': 0x5741 // WritingApp\r\n                    }, {\r\n                        'data': doubleToString(info.duration),\r\n                        'id': 0x4489 // Duration\r\n                    }]\r\n                }, {\r\n                    'id': 0x1654ae6b, // Tracks\r\n                    'data': [{\r\n                        'id': 0xae, // TrackEntry\r\n                        'data': [{\r\n                            'data': 1,\r\n                            'id': 0xd7 // TrackNumber\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x73c5 // TrackUID\r\n                        }, {\r\n                            'data': 0,\r\n                            'id': 0x9c // FlagLacing\r\n                        }, {\r\n                            'data': 'und',\r\n                            'id': 0x22b59c // Language\r\n                        }, {\r\n                            'data': 'V_VP8',\r\n                            'id': 0x86 // CodecID\r\n                        }, {\r\n                            'data': 'VP8',\r\n                            'id': 0x258688 // CodecName\r\n                        }, {\r\n                            'data': 1,\r\n                            'id': 0x83 // TrackType\r\n                        }, {\r\n                            'id': 0xe0, // Video\r\n                            'data': [{\r\n                                'data': info.width,\r\n                                'id': 0xb0 // PixelWidth\r\n                            }, {\r\n                                'data': info.height,\r\n                                'id': 0xba // PixelHeight\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            }];\r\n\r\n            //Generate clusters (max duration)\r\n            var frameNumber = 0;\r\n            var clusterTimecode = 0;\r\n            while (frameNumber < frames.length) {\r\n\r\n                var clusterFrames = [];\r\n                var clusterDuration = 0;\r\n                do {\r\n                    clusterFrames.push(frames[frameNumber]);\r\n                    clusterDuration += frames[frameNumber].duration;\r\n                    frameNumber++;\r\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\r\n\r\n                var clusterCounter = 0;\r\n                var cluster = {\r\n                    'id': 0x1f43b675, // Cluster\r\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\r\n                }; //Add cluster to segment\r\n                EBML[1].data.push(cluster);\r\n                clusterTimecode += clusterDuration;\r\n            }\r\n\r\n            return generateEBML(EBML);\r\n        }\r\n\r\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\r\n            return [{\r\n                'data': clusterTimecode,\r\n                'id': 0xe7 // Timecode\r\n            }].concat(clusterFrames.map(function(webp) {\r\n                var block = makeSimpleBlock({\r\n                    discardable: 0,\r\n                    frame: webp.data.slice(4),\r\n                    invisible: 0,\r\n                    keyframe: 1,\r\n                    lacing: 0,\r\n                    trackNum: 1,\r\n                    timecode: Math.round(clusterCounter)\r\n                });\r\n                clusterCounter += webp.duration;\r\n                return {\r\n                    data: block,\r\n                    id: 0xa3\r\n                };\r\n            }));\r\n        }\r\n\r\n        // sums the lengths of all the frames and gets the duration\r\n\r\n        function checkFrames(frames) {\r\n            if (!frames[0]) {\r\n                postMessage({\r\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            var width = frames[0].width,\r\n                height = frames[0].height,\r\n                duration = frames[0].duration;\r\n\r\n            for (var i = 1; i < frames.length; i++) {\r\n                duration += frames[i].duration;\r\n            }\r\n            return {\r\n                duration: duration,\r\n                width: width,\r\n                height: height\r\n            };\r\n        }\r\n\r\n        function numToBuffer(num) {\r\n            var parts = [];\r\n            while (num > 0) {\r\n                parts.push(num & 0xff);\r\n                num = num >> 8;\r\n            }\r\n            return new Uint8Array(parts.reverse());\r\n        }\r\n\r\n        function strToBuffer(str) {\r\n            return new Uint8Array(str.split('').map(function(e) {\r\n                return e.charCodeAt(0);\r\n            }));\r\n        }\r\n\r\n        function bitsToBuffer(bits) {\r\n            var data = [];\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data.push(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return new Uint8Array(data);\r\n        }\r\n\r\n        function generateEBML(json) {\r\n            var ebml = [];\r\n            for (var i = 0; i < json.length; i++) {\r\n                var data = json[i].data;\r\n\r\n                if (typeof data === 'object') {\r\n                    data = generateEBML(data);\r\n                }\r\n\r\n                if (typeof data === 'number') {\r\n                    data = bitsToBuffer(data.toString(2));\r\n                }\r\n\r\n                if (typeof data === 'string') {\r\n                    data = strToBuffer(data);\r\n                }\r\n\r\n                var len = data.size || data.byteLength || data.length;\r\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\r\n                var sizeToString = len.toString(2);\r\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\r\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\r\n\r\n                ebml.push(numToBuffer(json[i].id));\r\n                ebml.push(bitsToBuffer(size));\r\n                ebml.push(data);\r\n            }\r\n\r\n            return new Blob(ebml, {\r\n                type: 'video/webm'\r\n            });\r\n        }\r\n\r\n        function toBinStrOld(bits) {\r\n            var data = '';\r\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\r\n            bits = pad + bits;\r\n            for (var i = 0; i < bits.length; i += 8) {\r\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function makeSimpleBlock(data) {\r\n            var flags = 0;\r\n\r\n            if (data.keyframe) {\r\n                flags |= 128;\r\n            }\r\n\r\n            if (data.invisible) {\r\n                flags |= 8;\r\n            }\r\n\r\n            if (data.lacing) {\r\n                flags |= (data.lacing << 1);\r\n            }\r\n\r\n            if (data.discardable) {\r\n                flags |= 1;\r\n            }\r\n\r\n            if (data.trackNum > 127) {\r\n                throw 'TrackNumber > 127 not supported';\r\n            }\r\n\r\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).join('') + data.frame;\r\n\r\n            return out;\r\n        }\r\n\r\n        function parseWebP(riff) {\r\n            var VP8 = riff.RIFF[0].WEBP[0];\r\n\r\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\r\n            for (var i = 0, c = []; i < 4; i++) {\r\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\r\n            }\r\n\r\n            var width, height, tmp;\r\n\r\n            //the code below is literally copied verbatim from the bitstream spec\r\n            tmp = (c[1] << 8) | c[0];\r\n            width = tmp & 0x3FFF;\r\n            tmp = (c[3] << 8) | c[2];\r\n            height = tmp & 0x3FFF;\r\n            return {\r\n                width: width,\r\n                height: height,\r\n                data: VP8,\r\n                riff: riff\r\n            };\r\n        }\r\n\r\n        function getStrLength(string, offset) {\r\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\r\n                var unpadded = i.charCodeAt(0).toString(2);\r\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\r\n            }).join(''), 2);\r\n        }\r\n\r\n        function parseRIFF(string) {\r\n            var offset = 0;\r\n            var chunks = {};\r\n\r\n            while (offset < string.length) {\r\n                var id = string.substr(offset, 4);\r\n                var len = getStrLength(string, offset);\r\n                var data = string.substr(offset + 4 + 4, len);\r\n                offset += 4 + 4 + len;\r\n                chunks[id] = chunks[id] || [];\r\n\r\n                if (id === 'RIFF' || id === 'LIST') {\r\n                    chunks[id].push(parseRIFF(data));\r\n                } else {\r\n                    chunks[id].push(data);\r\n                }\r\n            }\r\n            return chunks;\r\n        }\r\n\r\n        function doubleToString(num) {\r\n            return [].slice.call(\r\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\r\n                return String.fromCharCode(e);\r\n            }).reverse().join('');\r\n        }\r\n\r\n        var webm = new ArrayToWebM(frames.map(function(frame) {\r\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\r\n            webp.duration = frame.duration;\r\n            return webp;\r\n        }));\r\n\r\n        postMessage(webm);\r\n    }\r\n\r\n    /**\r\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof Whammy\r\n     * @example\r\n     * recorder = new Whammy().Video(0.8, 100);\r\n     * recorder.compile(function(blob) {\r\n     *    // blob.size - blob.type\r\n     * });\r\n     */\r\n    WhammyVideo.prototype.compile = function(callback) {\r\n        var webWorker = processInWebWorker(whammyInWebWorker);\r\n\r\n        webWorker.onmessage = function(event) {\r\n            if (event.data.error) {\r\n                console.error(event.data.error);\r\n                return;\r\n            }\r\n            callback(event.data);\r\n        };\r\n\r\n        webWorker.postMessage(this.frames);\r\n    };\r\n\r\n    return {\r\n        /**\r\n         * A more abstract-ish API.\r\n         * @method\r\n         * @memberof Whammy\r\n         * @example\r\n         * recorder = new Whammy().Video(0.8, 100);\r\n         * @param {?number} speed - 0.8\r\n         * @param {?number} quality - 100\r\n         */\r\n        Video: WhammyVideo\r\n    };\r\n})();\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.Whammy = Whammy;\r\n}\n\r\n// ______________ (indexed-db)\r\n// DiskStorage.js\r\n\r\n/**\r\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\r\n * @summary Writing blobs into IndexedDB.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @example\r\n * DiskStorage.Store({\r\n *     audioBlob: yourAudioBlob,\r\n *     videoBlob: yourVideoBlob,\r\n *     gifBlob  : yourGifBlob\r\n * });\r\n * DiskStorage.Fetch(function(dataURL, type) {\r\n *     if(type === 'audioBlob') { }\r\n *     if(type === 'videoBlob') { }\r\n *     if(type === 'gifBlob')   { }\r\n * });\r\n * // DiskStorage.dataStoreName = 'recordRTC';\r\n * // DiskStorage.onError = function(error) { };\r\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\r\n * @property {function} Store - This method stores blobs in IndexedDB.\r\n * @property {function} onError - This function is invoked for any known/unknown error.\r\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n */\r\n\r\n\r\nvar DiskStorage = {\r\n    /**\r\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.init();\r\n     */\r\n    init: function() {\r\n        var self = this;\r\n\r\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\r\n            console.error('IndexedDB API are not available in this browser.');\r\n            return;\r\n        }\r\n\r\n        var dbVersion = 1;\r\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\r\n            db;\r\n        var request = indexedDB.open(dbName, dbVersion);\r\n\r\n        function createObjectStore(dataBase) {\r\n            dataBase.createObjectStore(self.dataStoreName);\r\n        }\r\n\r\n        function putInDB() {\r\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\r\n\r\n            if (self.videoBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\r\n            }\r\n\r\n            if (self.gifBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\r\n            }\r\n\r\n            if (self.audioBlob) {\r\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\r\n            }\r\n\r\n            function getFromStore(portionName) {\r\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\r\n                    if (self.callback) {\r\n                        self.callback(event.target.result, portionName);\r\n                    }\r\n                };\r\n            }\r\n\r\n            getFromStore('audioBlob');\r\n            getFromStore('videoBlob');\r\n            getFromStore('gifBlob');\r\n        }\r\n\r\n        request.onerror = self.onError;\r\n\r\n        request.onsuccess = function() {\r\n            db = request.result;\r\n            db.onerror = self.onError;\r\n\r\n            if (db.setVersion) {\r\n                if (db.version !== dbVersion) {\r\n                    var setVersion = db.setVersion(dbVersion);\r\n                    setVersion.onsuccess = function() {\r\n                        createObjectStore(db);\r\n                        putInDB();\r\n                    };\r\n                } else {\r\n                    putInDB();\r\n                }\r\n            } else {\r\n                putInDB();\r\n            }\r\n        };\r\n        request.onupgradeneeded = function(event) {\r\n            createObjectStore(event.target.result);\r\n        };\r\n    },\r\n    /**\r\n     * This method fetches stored blobs from IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Fetch(function(dataURL, type) {\r\n     *     if(type === 'audioBlob') { }\r\n     *     if(type === 'videoBlob') { }\r\n     *     if(type === 'gifBlob')   { }\r\n     * });\r\n     */\r\n    Fetch: function(callback) {\r\n        this.callback = callback;\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This method stores blobs in IndexedDB.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.Store({\r\n     *     audioBlob: yourAudioBlob,\r\n     *     videoBlob: yourVideoBlob,\r\n     *     gifBlob  : yourGifBlob\r\n     * });\r\n     */\r\n    Store: function(config) {\r\n        this.audioBlob = config.audioBlob;\r\n        this.videoBlob = config.videoBlob;\r\n        this.gifBlob = config.gifBlob;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    },\r\n    /**\r\n     * This function is invoked for any known/unknown error.\r\n     * @method\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.onError = function(error){\r\n     *     alerot( JSON.stringify(error) );\r\n     * };\r\n     */\r\n    onError: function(error) {\r\n        console.error(JSON.stringify(error, null, '\\t'));\r\n    },\r\n\r\n    /**\r\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\r\n     * @memberof DiskStorage\r\n     * @internal\r\n     * @example\r\n     * DiskStorage.dataStoreName = 'recordRTC';\r\n     */\r\n    dataStoreName: 'recordRTC',\r\n    dbName: null\r\n};\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.DiskStorage = DiskStorage;\r\n}\n\r\n// ______________\r\n// GifRecorder.js\r\n\r\n/**\r\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef GifRecorder\r\n * @class\r\n * @example\r\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     img.src = URL.createObjectURL(blob);\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\r\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\r\n */\r\n\r\nfunction GifRecorder(mediaStream, config) {\r\n    if (typeof GIFEncoder === 'undefined') {\r\n        var script = document.createElement('script');\r\n        script.src = 'https://cdn.webrtc-experiment.com/gif-recorder.js';\r\n        (document.body || document.documentElement).appendChild(script);\r\n    }\r\n\r\n    config = config || {};\r\n\r\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        if (typeof GIFEncoder === 'undefined') {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isLoadedMetaData) {\r\n            setTimeout(self.record, 1000);\r\n            return;\r\n        }\r\n\r\n        if (!isHTMLObject) {\r\n            if (!config.width) {\r\n                config.width = video.offsetWidth || 320;\r\n            }\r\n\r\n            if (!config.height) {\r\n                config.height = video.offsetHeight || 240;\r\n            }\r\n\r\n            if (!config.video) {\r\n                config.video = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            if (!config.canvas) {\r\n                config.canvas = {\r\n                    width: config.width,\r\n                    height: config.height\r\n                };\r\n            }\r\n\r\n            canvas.width = config.canvas.width || 320;\r\n            canvas.height = config.canvas.height || 240;\r\n\r\n            video.width = config.video.width || 320;\r\n            video.height = config.video.height || 240;\r\n        }\r\n\r\n        // external library to record as GIF images\r\n        gifEncoder = new GIFEncoder();\r\n\r\n        // void setRepeat(int iter) \r\n        // Sets the number of times the set of GIF frames should be played. \r\n        // Default is 1; 0 means play indefinitely.\r\n        gifEncoder.setRepeat(0);\r\n\r\n        // void setFrameRate(Number fps) \r\n        // Sets frame rate in frames per second. \r\n        // Equivalent to setDelay(1000/fps).\r\n        // Using \"setDelay\" instead of \"setFrameRate\"\r\n        gifEncoder.setDelay(config.frameRate || 200);\r\n\r\n        // void setQuality(int quality) \r\n        // Sets quality of color quantization (conversion of images to the \r\n        // maximum 256 colors allowed by the GIF specification). \r\n        // Lower values (minimum = 1) produce better colors, \r\n        // but slow processing significantly. 10 is the default, \r\n        // and produces good color mapping at reasonable speeds. \r\n        // Values greater than 20 do not yield significant improvements in speed.\r\n        gifEncoder.setQuality(config.quality || 10);\r\n\r\n        // Boolean start() \r\n        // This writes the GIF Header and returns false if it fails.\r\n        gifEncoder.start();\r\n\r\n        if (typeof config.onGifRecordingStarted === 'function') {\r\n            config.onGifRecordingStarted();\r\n        }\r\n\r\n        startTime = Date.now();\r\n\r\n        function drawVideoFrame(time) {\r\n            if (self.clearedRecordedData === true) {\r\n                return;\r\n            }\r\n\r\n            if (isPausedRecording) {\r\n                return setTimeout(function() {\r\n                    drawVideoFrame(time);\r\n                }, 100);\r\n            }\r\n\r\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n            if (typeof lastFrameTime === undefined) {\r\n                lastFrameTime = time;\r\n            }\r\n\r\n            // ~10 fps\r\n            if (time - lastFrameTime < 90) {\r\n                return;\r\n            }\r\n\r\n            if (!isHTMLObject && video.paused) {\r\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\r\n                // Tweak for Android Chrome\r\n                video.play();\r\n            }\r\n\r\n            if (!isHTMLObject) {\r\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (config.onGifPreview) {\r\n                config.onGifPreview(canvas.toDataURL('image/png'));\r\n            }\r\n\r\n            gifEncoder.addFrame(context);\r\n            lastFrameTime = time;\r\n        }\r\n\r\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\r\n\r\n        if (config.initCallback) {\r\n            config.initCallback();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     img.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        callback = callback || function() {};\r\n\r\n        if (lastAnimationFrame) {\r\n            cancelAnimationFrame(lastAnimationFrame);\r\n        }\r\n\r\n        endTime = Date.now();\r\n\r\n        /**\r\n         * @property {Blob} blob - The recorded blob object.\r\n         * @memberof GifRecorder\r\n         * @example\r\n         * recorder.stop(function(){\r\n         *     var blob = recorder.blob;\r\n         * });\r\n         */\r\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\r\n            type: 'image/gif'\r\n        });\r\n\r\n        callback(this.blob);\r\n\r\n        // bug: find a way to clear old recorded blobs\r\n        gifEncoder.stream().bin = [];\r\n    };\r\n\r\n    var isPausedRecording = false;\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        isPausedRecording = true;\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        isPausedRecording = false;\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof GifRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        self.clearedRecordedData = true;\r\n        clearRecordedDataCB();\r\n    };\r\n\r\n    function clearRecordedDataCB() {\r\n        if (gifEncoder) {\r\n            gifEncoder.stream().bin = [];\r\n        }\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'GifRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n\r\n    if (isHTMLObject) {\r\n        if (mediaStream instanceof CanvasRenderingContext2D) {\r\n            context = mediaStream;\r\n            canvas = context.canvas;\r\n        } else if (mediaStream instanceof HTMLCanvasElement) {\r\n            context = mediaStream.getContext('2d');\r\n            canvas = mediaStream;\r\n        }\r\n    }\r\n\r\n    var isLoadedMetaData = true;\r\n\r\n    if (!isHTMLObject) {\r\n        var video = document.createElement('video');\r\n        video.muted = true;\r\n        video.autoplay = true;\r\n\r\n        isLoadedMetaData = false;\r\n        video.onloadedmetadata = function() {\r\n            isLoadedMetaData = true;\r\n        };\r\n\r\n        setSrcObject(mediaStream, video);\r\n\r\n        video.play();\r\n    }\r\n\r\n    var lastAnimationFrame = null;\r\n    var startTime, endTime, lastFrameTime;\r\n\r\n    var gifEncoder;\r\n\r\n    var self = this;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.GifRecorder = GifRecorder;\r\n}\n\r\n// Last time updated: 2017-09-26 7:19:00 AM UTC\r\n\r\n// ________________________\r\n// MultiStreamsMixer v1.0.3\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nfunction MultiStreamsMixer(arrayOfMediaStreams) {\r\n\r\n    // requires: chrome://flags/#enable-experimental-web-platform-features\r\n\r\n    var videos = [];\r\n    var isStopDrawingFrames = false;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    canvas.style = 'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000; margin-top:-1000000000;margin-left:-1000000000;';\r\n    (document.body || document.documentElement).appendChild(canvas);\r\n\r\n    this.disableLogs = false;\r\n    this.frameInterval = 10;\r\n\r\n    this.width = 360;\r\n    this.height = 240;\r\n\r\n    // use gain node to prevent echo\r\n    this.useGainNode = true;\r\n\r\n    var self = this;\r\n\r\n    // _____________________________\r\n    // Cross-Browser-Declarations.js\r\n\r\n    // WebAudio API representer\r\n    var AudioContext = window.AudioContext;\r\n\r\n    if (typeof AudioContext === 'undefined') {\r\n        if (typeof webkitAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = webkitAudioContext;\r\n        }\r\n\r\n        if (typeof mozAudioContext !== 'undefined') {\r\n            /*global AudioContext:true */\r\n            AudioContext = mozAudioContext;\r\n        }\r\n    }\r\n\r\n    /*jshint -W079 */\r\n    var URL = window.URL;\r\n\r\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\r\n        /*global URL:true */\r\n        URL = webkitURL;\r\n    }\r\n\r\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\r\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n        }\r\n\r\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n            navigator.getUserMedia = navigator.mozGetUserMedia;\r\n        }\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        if (!('getVideoTracks' in MediaStream.prototype)) {\r\n            MediaStream.prototype.getVideoTracks = function() {\r\n                if (!this.getTracks) {\r\n                    return [];\r\n                }\r\n\r\n                var tracks = [];\r\n                this.getTracks.forEach(function(track) {\r\n                    if (track.kind.toString().indexOf('video') !== -1) {\r\n                        tracks.push(track);\r\n                    }\r\n                });\r\n                return tracks;\r\n            };\r\n\r\n            MediaStream.prototype.getAudioTracks = function() {\r\n                if (!this.getTracks) {\r\n                    return [];\r\n                }\r\n\r\n                var tracks = [];\r\n                this.getTracks.forEach(function(track) {\r\n                    if (track.kind.toString().indexOf('audio') !== -1) {\r\n                        tracks.push(track);\r\n                    }\r\n                });\r\n                return tracks;\r\n            };\r\n        }\r\n\r\n        // override \"stop\" method for all browsers\r\n        if (typeof MediaStream.prototype.stop === 'undefined') {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    var Storage = {};\r\n\r\n    if (typeof AudioContext !== 'undefined') {\r\n        Storage.AudioContext = AudioContext;\r\n    } else if (typeof webkitAudioContext !== 'undefined') {\r\n        Storage.AudioContext = webkitAudioContext;\r\n    }\r\n\r\n    function setSrcObject(stream, element, ignoreCreateObjectURL) {\r\n        if ('createObjectURL' in URL && !ignoreCreateObjectURL) {\r\n            try {\r\n                element.src = URL.createObjectURL(stream);\r\n            } catch (e) {\r\n                setSrcObject(stream, element, true);\r\n                return;\r\n            }\r\n        } else if ('srcObject' in element) {\r\n            element.srcObject = stream;\r\n        } else if ('mozSrcObject' in element) {\r\n            element.mozSrcObject = stream;\r\n        } else {\r\n            alert('createObjectURL/srcObject both are not supported.');\r\n        }\r\n    }\r\n\r\n    this.startDrawingFrames = function() {\r\n        drawVideosToCanvas();\r\n    };\r\n\r\n    function drawVideosToCanvas() {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var videosLength = videos.length;\r\n\r\n        var fullcanvas = false;\r\n        var remaining = [];\r\n        videos.forEach(function(video) {\r\n            if (!video.stream) {\r\n                video.stream = {};\r\n            }\r\n\r\n            if (video.stream.fullcanvas) {\r\n                fullcanvas = video;\r\n            } else {\r\n                remaining.push(video);\r\n            }\r\n        });\r\n\r\n        if (fullcanvas) {\r\n            canvas.width = fullcanvas.stream.width;\r\n            canvas.height = fullcanvas.stream.height;\r\n        } else if (remaining.length) {\r\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\r\n\r\n            var height = 1;\r\n            if (videosLength === 3 || videosLength === 4) {\r\n                height = 2;\r\n            }\r\n            if (videosLength === 5 || videosLength === 6) {\r\n                height = 3;\r\n            }\r\n            if (videosLength === 7 || videosLength === 8) {\r\n                height = 4;\r\n            }\r\n            if (videosLength === 9 || videosLength === 10) {\r\n                height = 5;\r\n            }\r\n            canvas.height = remaining[0].height * height;\r\n        } else {\r\n            canvas.width = self.width || 360;\r\n            canvas.height = self.height || 240;\r\n        }\r\n\r\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\r\n            drawImage(fullcanvas);\r\n        }\r\n\r\n        remaining.forEach(function(video, idx) {\r\n            drawImage(video, idx);\r\n        });\r\n\r\n        setTimeout(drawVideosToCanvas, self.frameInterval);\r\n    }\r\n\r\n    function drawImage(video, idx) {\r\n        if (isStopDrawingFrames) {\r\n            return;\r\n        }\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var width = video.width;\r\n        var height = video.height;\r\n\r\n        if (idx === 1) {\r\n            x = video.width;\r\n        }\r\n\r\n        if (idx === 2) {\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 3) {\r\n            x = video.width;\r\n            y = video.height;\r\n        }\r\n\r\n        if (idx === 4) {\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 5) {\r\n            x = video.width;\r\n            y = video.height * 2;\r\n        }\r\n\r\n        if (idx === 6) {\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (idx === 7) {\r\n            x = video.width;\r\n            y = video.height * 3;\r\n        }\r\n\r\n        if (typeof video.stream.left !== 'undefined') {\r\n            x = video.stream.left;\r\n        }\r\n\r\n        if (typeof video.stream.top !== 'undefined') {\r\n            y = video.stream.top;\r\n        }\r\n\r\n        if (typeof video.stream.width !== 'undefined') {\r\n            width = video.stream.width;\r\n        }\r\n\r\n        if (typeof video.stream.height !== 'undefined') {\r\n            height = video.stream.height;\r\n        }\r\n\r\n        context.drawImage(video, x, y, width, height);\r\n\r\n        if (typeof video.stream.onRender === 'function') {\r\n            video.stream.onRender(context, x, y, width, height, idx);\r\n        }\r\n    }\r\n\r\n    function getMixedStream() {\r\n        isStopDrawingFrames = false;\r\n        var mixedVideoStream = getMixedVideoStream();\r\n\r\n        var mixedAudioStream = getMixedAudioStream();\r\n        if (mixedAudioStream) {\r\n            mixedAudioStream.getAudioTracks().forEach(function(track) {\r\n                mixedVideoStream.addTrack(track);\r\n            });\r\n        }\r\n\r\n        var fullcanvas;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (stream.fullcanvas) {\r\n                fullcanvas = true;\r\n            }\r\n        });\r\n\r\n        return mixedVideoStream;\r\n    }\r\n\r\n    function getMixedVideoStream() {\r\n        resetVideoStreams();\r\n\r\n        var capturedStream;\r\n\r\n        if ('captureStream' in canvas) {\r\n            capturedStream = canvas.captureStream();\r\n        } else if ('mozCaptureStream' in canvas) {\r\n            capturedStream = canvas.mozCaptureStream();\r\n        } else if (!self.disableLogs) {\r\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\r\n        }\r\n\r\n        var videoStream = new MediaStream();\r\n\r\n        capturedStream.getVideoTracks().forEach(function(track) {\r\n            videoStream.addTrack(track);\r\n        });\r\n\r\n        canvas.stream = videoStream;\r\n\r\n        return videoStream;\r\n    }\r\n\r\n    function getMixedAudioStream() {\r\n        // via: @pehrsons\r\n        if (!Storage.AudioContextConstructor) {\r\n            Storage.AudioContextConstructor = new Storage.AudioContext();\r\n        }\r\n\r\n        self.audioContext = Storage.AudioContextConstructor;\r\n\r\n        self.audioSources = [];\r\n\r\n        if (self.useGainNode === true) {\r\n            self.gainNode = self.audioContext.createGain();\r\n            self.gainNode.connect(self.audioContext.destination);\r\n            self.gainNode.gain.value = 0; // don't hear self\r\n        }\r\n\r\n        var audioTracksLength = 0;\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            if (!stream.getAudioTracks().length) {\r\n                return;\r\n            }\r\n\r\n            audioTracksLength++;\r\n\r\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n\r\n            if (self.useGainNode === true) {\r\n                audioSource.connect(self.gainNode);\r\n            }\r\n\r\n            self.audioSources.push(audioSource);\r\n        });\r\n\r\n        if (!audioTracksLength) {\r\n            return;\r\n        }\r\n\r\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\r\n        self.audioSources.forEach(function(audioSource) {\r\n            audioSource.connect(self.audioDestination);\r\n        });\r\n        return self.audioDestination.stream;\r\n    }\r\n\r\n    function getVideo(stream) {\r\n        var video = document.createElement('video');\r\n\r\n        setSrcObject(stream, video);\r\n\r\n        video.muted = true;\r\n        video.volume = 0;\r\n\r\n        video.width = stream.width || self.width || 360;\r\n        video.height = stream.height || self.height || 240;\r\n\r\n        video.play();\r\n\r\n        return video;\r\n    }\r\n\r\n    this.appendStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        streams.forEach(function(stream) {\r\n            if (stream.getVideoTracks().length) {\r\n                var video = getVideo(stream);\r\n                video.stream = stream;\r\n                videos.push(video);\r\n            }\r\n\r\n            if (stream.getAudioTracks().length && self.audioContext) {\r\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\r\n                audioSource.connect(self.audioDestination);\r\n                self.audioSources.push(audioSource);\r\n            }\r\n        });\r\n    };\r\n\r\n    this.releaseStreams = function() {\r\n        videos = [];\r\n        isStopDrawingFrames = true;\r\n\r\n        if (self.gainNode) {\r\n            self.gainNode.disconnect();\r\n            self.gainNode = null;\r\n        }\r\n\r\n        if (self.audioSources.length) {\r\n            self.audioSources.forEach(function(source) {\r\n                source.disconnect();\r\n            });\r\n            self.audioSources = [];\r\n        }\r\n\r\n        if (self.audioDestination) {\r\n            self.audioDestination.disconnect();\r\n            self.audioDestination = null;\r\n        }\r\n\r\n        self.audioContext = null;\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (canvas.stream) {\r\n            canvas.stream.stop();\r\n            canvas.stream = null;\r\n        }\r\n    };\r\n\r\n    this.resetVideoStreams = function(streams) {\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        resetVideoStreams(streams);\r\n    };\r\n\r\n    function resetVideoStreams(streams) {\r\n        videos = [];\r\n        streams = streams || arrayOfMediaStreams;\r\n\r\n        // via: @adrian-ber\r\n        streams.forEach(function(stream) {\r\n            if (!stream.getVideoTracks().length) {\r\n                return;\r\n            }\r\n\r\n            var video = getVideo(stream);\r\n            video.stream = stream;\r\n            videos.push(video);\r\n        });\r\n    }\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamsMixer';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n\r\n    this.getMixedStream = getMixedStream;\r\n\r\n}\n\r\n// ______________________\r\n// MultiStreamRecorder.js\r\n\r\n/*\r\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\r\n */\r\n\r\n/**\r\n * MultiStreamRecorder can record multiple videos in single container.\r\n * @summary Multi-videos recorder.\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef MultiStreamRecorder\r\n * @class\r\n * @example\r\n * var options = {\r\n *     mimeType: 'video/webm'\r\n * }\r\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\r\n * recorder.record();\r\n * recorder.stop(function(blob) {\r\n *     video.src = URL.createObjectURL(blob);\r\n *\r\n *     // or\r\n *     var blob = recorder.blob;\r\n * });\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\r\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\r\n */\r\n\r\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\r\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\r\n    var self = this;\r\n\r\n    var mixer;\r\n    var mediaRecorder;\r\n\r\n    options = options || {\r\n        mimeType: 'video/webm',\r\n        video: {\r\n            width: 360,\r\n            height: 240\r\n        }\r\n    };\r\n\r\n    if (!options.frameInterval) {\r\n        options.frameInterval = 10;\r\n    }\r\n\r\n    if (!options.video) {\r\n        options.video = {};\r\n    }\r\n\r\n    if (!options.video.width) {\r\n        options.video.width = 360;\r\n    }\r\n\r\n    if (!options.video.height) {\r\n        options.video.height = 240;\r\n    }\r\n\r\n    /**\r\n     * This method records all MediaStreams.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.record();\r\n     */\r\n    this.record = function() {\r\n        // github/muaz-khan/MultiStreamsMixer\r\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams);\r\n\r\n        if (getVideoTracks().length) {\r\n            mixer.frameInterval = options.frameInterval || 10;\r\n            mixer.width = options.video.width || 360;\r\n            mixer.height = options.video.height || 240;\r\n            mixer.startDrawingFrames();\r\n        }\r\n\r\n        if (options.previewStream && typeof options.previewStream === 'function') {\r\n            options.previewStream(mixer.getMixedStream());\r\n        }\r\n\r\n        // record using MediaRecorder API\r\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\r\n        mediaRecorder.record();\r\n    };\r\n\r\n    function getVideoTracks() {\r\n        var tracks = [];\r\n        arrayOfMediaStreams.forEach(function(stream) {\r\n            stream.getVideoTracks().forEach(function(track) {\r\n                tracks.push(track);\r\n            });\r\n        });\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * This method stops recording MediaStream.\r\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.stop(function(blob) {\r\n     *     video.src = URL.createObjectURL(blob);\r\n     * });\r\n     */\r\n    this.stop = function(callback) {\r\n        if (!mediaRecorder) {\r\n            return;\r\n        }\r\n\r\n        mediaRecorder.stop(function(blob) {\r\n            self.blob = blob;\r\n\r\n            callback(blob);\r\n\r\n            self.clearRecordedData();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method pauses the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.pause();\r\n     */\r\n    this.pause = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.pause();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resumes the recording process.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.resume();\r\n     */\r\n    this.resume = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.resume();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * This method resets currently recorded data.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @example\r\n     * recorder.clearRecordedData();\r\n     */\r\n    this.clearRecordedData = function() {\r\n        if (mediaRecorder) {\r\n            mediaRecorder.clearRecordedData();\r\n            mediaRecorder = null;\r\n        }\r\n\r\n        if (mixer) {\r\n            mixer.releaseStreams();\r\n            mixer = null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add extra media-streams to existing recordings.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.addStreams([newAudioStream, newVideoStream]);\r\n     */\r\n    this.addStreams = function(streams) {\r\n        if (!streams) {\r\n            throw 'First parameter is required.';\r\n        }\r\n\r\n        if (!(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        arrayOfMediaStreams.concat(streams);\r\n\r\n        if (!mediaRecorder || !mixer) {\r\n            return;\r\n        }\r\n\r\n        mixer.appendStreams(streams);\r\n    };\r\n\r\n    /**\r\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\r\n     * @method\r\n     * @memberof MultiStreamRecorder\r\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\r\n     * @example\r\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\r\n     */\r\n    this.resetVideoStreams = function(streams) {\r\n        if (!mixer) {\r\n            return;\r\n        }\r\n\r\n        if (streams && !(streams instanceof Array)) {\r\n            streams = [streams];\r\n        }\r\n\r\n        mixer.resetVideoStreams(streams);\r\n    };\r\n\r\n    // for debugging\r\n    this.name = 'MultiStreamRecorder';\r\n    this.toString = function() {\r\n        return this.name;\r\n    };\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\r\n}\n\r\n// _____________________\r\n// RecordRTC.promises.js\r\n\r\n/**\r\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\r\n * @summary Promises for {@link RecordRTC}\r\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\r\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\r\n * @typedef RecordRTCPromisesHandler\r\n * @class\r\n * @example\r\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\r\n * recorder.startRecording()\r\n *         .then(successCB)\r\n *         .catch(errorCB);\r\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\r\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\r\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\r\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\r\n * @requires {@link RecordRTC}\r\n */\r\n\r\nfunction RecordRTCPromisesHandler(mediaStream, options) {\r\n    if (!this) {\r\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\r\n    }\r\n\r\n    if (typeof mediaStream === 'undefined') {\r\n        throw 'First argument \"MediaStream\" is required.';\r\n    }\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * var internal = recorder.recordRTC.getInternalRecorder();\r\n     * alert(internal instanceof MediaStreamRecorder);\r\n     */\r\n    self.recordRTC = new RecordRTC(mediaStream, options);\r\n\r\n    /**\r\n     * This method records MediaStream.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.startRecording()\r\n     *         .then(successCB)\r\n     *         .catch(errorCB);\r\n     */\r\n    this.startRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.startRecording();\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method stops the recording.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.stopRecording = function() {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.stopRecording(function(url) {\r\n                    self.blob = self.recordRTC.getBlob();\r\n                    resolve(url);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns data-url for the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     recorder.getDataURL().then(function(dataURL) {\r\n     *         window.open(dataURL);\r\n     *     }).catch(errorCB);;\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getDataURL = function(callback) {\r\n        return new Promise(function(resolve, reject) {\r\n            try {\r\n                self.recordRTC.getDataURL(function(dataURL) {\r\n                    resolve(dataURL);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This method returns the recorded blob.\r\n     * @method\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.getBlob = function() {\r\n        return self.recordRTC.getBlob();\r\n    };\r\n\r\n    /**\r\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\r\n     * @memberof RecordRTCPromisesHandler\r\n     * @example\r\n     * recorder.stopRecording().then(function() {\r\n     *     var blob = recorder.getBlob();\r\n     * }).catch(errorCB);\r\n     */\r\n    this.blob = null;\r\n}\r\n\r\nif (typeof RecordRTC !== 'undefined') {\r\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\r\n}\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}